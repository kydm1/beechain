// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gyl.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	gyl.proto

It has these top-level messages:
	AdanceInfo
	ZsgjReceipt
	ZsgjProduct
	ZsgjAccount
	ZsgjRoleAccount
	AllAccount
	ZsgjAction
	ZsgjCash
	ZsgjClear
	ZsgjDelist
	ZsgjApplyWithdraw
	ZsgjApplyRecharge
	ZsgjProductExamine
	ZsgjPersonCertification
	ZsgjCompanyCertification
	ZsgjSaveReceipt
	ZsgjSaveProduct
	AssetRegisterAction
	AdAssetRegister
	AdApplyBlankNote
	AdAndNoteCash
	DlReceiptPay
	DlReceiptDelist
	DlBlankNote
	DlReceiptList
	DlBlankNotePay
	DlInvestCash
	DlReceiptAndNoteCash
	DlCredit
	GylFinanceInfo
	GylDirectFinance
	Enterprise
	DelistInfo
	Delist
	RmbAssets
	ReceiptAssets
	ProductAssets
	BlankNoteAssets
	AdanceAssets
	ZsgjReceiptInfo
	ZsgjProductInfo
	ZsgjBlankNoteInfo
	BlankNoteInfo
	ResultReceipt
	ResultProduct
	ResultAssetRegister
	ResultWithdraw
	ResultRecharge
	ResultPsnCertification
	ResultCpyCertification
	ResultCash
	ResultClear
	ResultDelist
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ZsgjState int32

const (
	ZsgjState_UNKNOW ZsgjState = 0
	// 保存单据状态
	ZsgjState_WAIT_UPSTREAM_SIGN   ZsgjState = 1
	ZsgjState_UPSTREAM_REFUSE_SIGN ZsgjState = 2
	ZsgjState_BILL_HOLDING         ZsgjState = 3
	ZsgjState_WAIT_CORE_CHECKED    ZsgjState = 4
	ZsgjState_CORE_REFUSE_CHECKED  ZsgjState = 5
	ZsgjState_WAIT_PUBLISH_SIGN    ZsgjState = 6
	ZsgjState_PUBLISH_REFUSE_SIGN  ZsgjState = 7
	ZsgjState_BILL_HOLDING_ISSUE   ZsgjState = 8
	ZsgjState_UPSTREAM_BE_PRODUCT  ZsgjState = 9
	ZsgjState_ISSUE_BE_PRODUCT     ZsgjState = 10
	ZsgjState_BILL_CANCEL          ZsgjState = 11
	// 保存产品状态
	ZsgjState_PRODUCT_CANCE      ZsgjState = 12
	ZsgjState_WAIT_GUARANTEE     ZsgjState = 13
	ZsgjState_WAIT_TRUSTEESHIP   ZsgjState = 14
	ZsgjState_REFUSE_GUARANTEE   ZsgjState = 15
	ZsgjState_REFUSE_TRUSTEESHIP ZsgjState = 16
	ZsgjState_WAIT_EXAMINE       ZsgjState = 17
	ZsgjState_REFUSE_EXAMINE     ZsgjState = 18
	// 持有的产品
	// 待挂牌
	ZsgjState_ON_HOLD ZsgjState = 19
	// 待认购
	ZsgjState_ON_LISTING ZsgjState = 20
	// 认购中
	ZsgjState_ON_LISTING_DELISTING ZsgjState = 21
	ZsgjState_WAIT_FOR_LIQUIDATION ZsgjState = 22
	ZsgjState_SUCCESS_RELEASE      ZsgjState = 23
	ZsgjState_FAIL_RELEASE         ZsgjState = 24
	// 已经完成的产品
	ZsgjState_SUCCESS_PAYMENT ZsgjState = 25
	// 资产登记状态
	// 充值状态
	ZsgjState_IN_AUDIT_SUCCESS ZsgjState = 26
	// 提款状态
	ZsgjState_OUT_AUDIT2_BANK_SUCCESS ZsgjState = 27
	ZsgjState_OUT_AUDIT2_BANK_FAIL    ZsgjState = 28
	ZsgjState_OUT_AUDIT1_SUCCESS      ZsgjState = 29
	ZsgjState_OUT_AUDIT1_FAIL         ZsgjState = 30
	ZsgjState_OUT_WAIT_AUDIT1         ZsgjState = 31
	// 清算
	ZsgjState_CLEAR_SUCCESS ZsgjState = 34
	ZsgjState_CLEAR_FALSE   ZsgjState = 35
	// 企业认证和个人认证
	ZsgjState_PASS_EXAMINE                      ZsgjState = 38
	ZsgjState_BILL_OVERDUE                      ZsgjState = 39
	ZsgjState_BILL_EXPIRE                       ZsgjState = 40
	ZsgjState_PLEDGE_BILL_LISTING               ZsgjState = 41
	ZsgjState_PLEDGE_BILL_LISTING_FINISH        ZsgjState = 42
	ZsgjState_PLEDGE_BILL_HOLDING               ZsgjState = 43
	ZsgjState_PLEDGE_BILL_APPLYING              ZsgjState = 44
	ZsgjState_PLEDGE_BILL_IOUS                  ZsgjState = 45
	ZsgjState_CONTRACT_BILL_WAIT_SUBSCRIBE      ZsgjState = 46
	ZsgjState_CONTRACT_BILL_LIST_FINISH         ZsgjState = 47
	ZsgjState_CONTRACT_BILL_IN_SUBSCRIBE        ZsgjState = 48
	ZsgjState_CONTRACT_BILL_FINISH_SUBSCRIBE    ZsgjState = 49
	ZsgjState_CONTRACT_BILL_HOLDING             ZsgjState = 50
	ZsgjState_BILL_PAY_FROZEN                   ZsgjState = 51
	ZsgjState_BILL_PAY_FINISH                   ZsgjState = 52
	ZsgjState_BILL_PAY_CANCEL                   ZsgjState = 53
	ZsgjState_PLEDGE_BILL_APPLYING_REFUSE       ZsgjState = 54
	ZsgjState_HAD_CASH_FINISH                   ZsgjState = 55
	ZsgjState_BILL_INVALID                      ZsgjState = 56
	ZsgjState_BILL_IN_TRANSFER                  ZsgjState = 57
	ZsgjState_BILL_TRANSFER_FINISH              ZsgjState = 58
	ZsgjState_WAITING_HONOUR                    ZsgjState = 59
	ZsgjState_BILL_APPLYING_IOU                 ZsgjState = 60
	ZsgjState_APPLY_OK                          ZsgjState = 61
	ZsgjState_APPLY_REJECT                      ZsgjState = 62
	ZsgjState_IOU_FROZEN                        ZsgjState = 63
	ZsgjState_IOU_PAYMENT_REVOCATION            ZsgjState = 64
	ZsgjState_IOU_EXPIRED                       ZsgjState = 65
	ZsgjState_IOU_PAYMENT                       ZsgjState = 66
	ZsgjState_PAY_SUCCESS                       ZsgjState = 67
	ZsgjState_IOU_OVERDUE                       ZsgjState = 68
	ZsgjState_WAIT_PAY                          ZsgjState = 69
	ZsgjState_IOU_PAYMENT_HAVE_REVOCATION       ZsgjState = 70
	ZsgjState_ALL_CASH_FINISH                   ZsgjState = 71
	ZsgjState_IOU_APPLY_REVOKED                 ZsgjState = 72
	ZsgjState_BLANK_NOTE_INVALID                ZsgjState = 80
	ZsgjState_BLANK_NOTE_IN_APPLYING            ZsgjState = 81
	ZsgjState_CORE_REFUSE_CONFIRM_BLANK_NOTE    ZsgjState = 82
	ZsgjState_WAIT_BANK_CONFIRM_BLANK_NOTE      ZsgjState = 83
	ZsgjState_WAIT_INVEST_CONFIRM_BLANK_NOTE    ZsgjState = 84
	ZsgjState_BANK_REFUSE_CONFIRM_BLANK_NOTE    ZsgjState = 85
	ZsgjState_INVEST_REFUSE_CONFIRM_BLANK_NOTE  ZsgjState = 86
	ZsgjState_BANK_AGREE_CONFIRM_BLANK_NOTE     ZsgjState = 87
	ZsgjState_INVEST_AGREE_CONFIRM_BLANK_NOTE   ZsgjState = 88
	ZsgjState_DOWN_HOLD_BLANK_NOTE              ZsgjState = 89
	ZsgjState_CORE_HOLD_BLANK_NOTE              ZsgjState = 90
	ZsgjState_BLANK_HAD_HONOUR                  ZsgjState = 91
	ZsgjState_FUND_BANK                         ZsgjState = 92
	ZsgjState_FUND_INVEST                       ZsgjState = 93
	ZsgjState_PAYMENT_ONLINE                    ZsgjState = 94
	ZsgjState_PAYMENT_OFFLINE                   ZsgjState = 95
	ZsgjState_APPLY_HONOUR                      ZsgjState = 96
	ZsgjState_EXPIRE                            ZsgjState = 97
	ZsgjState_OVERDUE                           ZsgjState = 98
	ZsgjState_PAYMENT_INVALID                   ZsgjState = 99
	ZsgjState_WAIT_CORE_CONFIRM_PAYMENT         ZsgjState = 100
	ZsgjState_CORE_REFUSE_CONFIRM_PAYMENT       ZsgjState = 101
	ZsgjState_DOWN_HOLDING_PAYMENT              ZsgjState = 102
	ZsgjState_ADVANCE_BLANK_IN_APPLYING         ZsgjState = 103
	ZsgjState_ADVANCE_BLANK_FINISH_APPLYING     ZsgjState = 104
	ZsgjState_INVEST_HOLD_ADVANCE               ZsgjState = 105
	ZsgjState_DOWN_ADVANCE_WAIT_HONOUR          ZsgjState = 106
	ZsgjState_ADVANCE_PAYMENT_HAD_HONOUR        ZsgjState = 107
	ZsgjState_IN_APPLYING                       ZsgjState = 108
	ZsgjState_FINISH_APPLY                      ZsgjState = 109
	ZsgjState_UN_FINISH                         ZsgjState = 110
	ZsgjState_HAD_FINISH                        ZsgjState = 111
	ZsgjState_DIRECTIONAL_BILL_LIST_FINISH      ZsgjState = 112
	ZsgjState_DIRECTIONAL_BILL_FINISH_SUBSCRIBE ZsgjState = 113
	ZsgjState_DIRECTIONAL_BILL_CANCLE           ZsgjState = 114
	ZsgjState_DIRECTIONAL_BILL_REFUSE           ZsgjState = 115
)

var ZsgjState_name = map[int32]string{
	0:   "UNKNOW",
	1:   "WAIT_UPSTREAM_SIGN",
	2:   "UPSTREAM_REFUSE_SIGN",
	3:   "BILL_HOLDING",
	4:   "WAIT_CORE_CHECKED",
	5:   "CORE_REFUSE_CHECKED",
	6:   "WAIT_PUBLISH_SIGN",
	7:   "PUBLISH_REFUSE_SIGN",
	8:   "BILL_HOLDING_ISSUE",
	9:   "UPSTREAM_BE_PRODUCT",
	10:  "ISSUE_BE_PRODUCT",
	11:  "BILL_CANCEL",
	12:  "PRODUCT_CANCE",
	13:  "WAIT_GUARANTEE",
	14:  "WAIT_TRUSTEESHIP",
	15:  "REFUSE_GUARANTEE",
	16:  "REFUSE_TRUSTEESHIP",
	17:  "WAIT_EXAMINE",
	18:  "REFUSE_EXAMINE",
	19:  "ON_HOLD",
	20:  "ON_LISTING",
	21:  "ON_LISTING_DELISTING",
	22:  "WAIT_FOR_LIQUIDATION",
	23:  "SUCCESS_RELEASE",
	24:  "FAIL_RELEASE",
	25:  "SUCCESS_PAYMENT",
	26:  "IN_AUDIT_SUCCESS",
	27:  "OUT_AUDIT2_BANK_SUCCESS",
	28:  "OUT_AUDIT2_BANK_FAIL",
	29:  "OUT_AUDIT1_SUCCESS",
	30:  "OUT_AUDIT1_FAIL",
	31:  "OUT_WAIT_AUDIT1",
	34:  "CLEAR_SUCCESS",
	35:  "CLEAR_FALSE",
	38:  "PASS_EXAMINE",
	39:  "BILL_OVERDUE",
	40:  "BILL_EXPIRE",
	41:  "PLEDGE_BILL_LISTING",
	42:  "PLEDGE_BILL_LISTING_FINISH",
	43:  "PLEDGE_BILL_HOLDING",
	44:  "PLEDGE_BILL_APPLYING",
	45:  "PLEDGE_BILL_IOUS",
	46:  "CONTRACT_BILL_WAIT_SUBSCRIBE",
	47:  "CONTRACT_BILL_LIST_FINISH",
	48:  "CONTRACT_BILL_IN_SUBSCRIBE",
	49:  "CONTRACT_BILL_FINISH_SUBSCRIBE",
	50:  "CONTRACT_BILL_HOLDING",
	51:  "BILL_PAY_FROZEN",
	52:  "BILL_PAY_FINISH",
	53:  "BILL_PAY_CANCEL",
	54:  "PLEDGE_BILL_APPLYING_REFUSE",
	55:  "HAD_CASH_FINISH",
	56:  "BILL_INVALID",
	57:  "BILL_IN_TRANSFER",
	58:  "BILL_TRANSFER_FINISH",
	59:  "WAITING_HONOUR",
	60:  "BILL_APPLYING_IOU",
	61:  "APPLY_OK",
	62:  "APPLY_REJECT",
	63:  "IOU_FROZEN",
	64:  "IOU_PAYMENT_REVOCATION",
	65:  "IOU_EXPIRED",
	66:  "IOU_PAYMENT",
	67:  "PAY_SUCCESS",
	68:  "IOU_OVERDUE",
	69:  "WAIT_PAY",
	70:  "IOU_PAYMENT_HAVE_REVOCATION",
	71:  "ALL_CASH_FINISH",
	72:  "IOU_APPLY_REVOKED",
	80:  "BLANK_NOTE_INVALID",
	81:  "BLANK_NOTE_IN_APPLYING",
	82:  "CORE_REFUSE_CONFIRM_BLANK_NOTE",
	83:  "WAIT_BANK_CONFIRM_BLANK_NOTE",
	84:  "WAIT_INVEST_CONFIRM_BLANK_NOTE",
	85:  "BANK_REFUSE_CONFIRM_BLANK_NOTE",
	86:  "INVEST_REFUSE_CONFIRM_BLANK_NOTE",
	87:  "BANK_AGREE_CONFIRM_BLANK_NOTE",
	88:  "INVEST_AGREE_CONFIRM_BLANK_NOTE",
	89:  "DOWN_HOLD_BLANK_NOTE",
	90:  "CORE_HOLD_BLANK_NOTE",
	91:  "BLANK_HAD_HONOUR",
	92:  "FUND_BANK",
	93:  "FUND_INVEST",
	94:  "PAYMENT_ONLINE",
	95:  "PAYMENT_OFFLINE",
	96:  "APPLY_HONOUR",
	97:  "EXPIRE",
	98:  "OVERDUE",
	99:  "PAYMENT_INVALID",
	100: "WAIT_CORE_CONFIRM_PAYMENT",
	101: "CORE_REFUSE_CONFIRM_PAYMENT",
	102: "DOWN_HOLDING_PAYMENT",
	103: "ADVANCE_BLANK_IN_APPLYING",
	104: "ADVANCE_BLANK_FINISH_APPLYING",
	105: "INVEST_HOLD_ADVANCE",
	106: "DOWN_ADVANCE_WAIT_HONOUR",
	107: "ADVANCE_PAYMENT_HAD_HONOUR",
	108: "IN_APPLYING",
	109: "FINISH_APPLY",
	110: "UN_FINISH",
	111: "HAD_FINISH",
	112: "DIRECTIONAL_BILL_LIST_FINISH",
	113: "DIRECTIONAL_BILL_FINISH_SUBSCRIBE",
	114: "DIRECTIONAL_BILL_CANCLE",
	115: "DIRECTIONAL_BILL_REFUSE",
}
var ZsgjState_value = map[string]int32{
	"UNKNOW":                            0,
	"WAIT_UPSTREAM_SIGN":                1,
	"UPSTREAM_REFUSE_SIGN":              2,
	"BILL_HOLDING":                      3,
	"WAIT_CORE_CHECKED":                 4,
	"CORE_REFUSE_CHECKED":               5,
	"WAIT_PUBLISH_SIGN":                 6,
	"PUBLISH_REFUSE_SIGN":               7,
	"BILL_HOLDING_ISSUE":                8,
	"UPSTREAM_BE_PRODUCT":               9,
	"ISSUE_BE_PRODUCT":                  10,
	"BILL_CANCEL":                       11,
	"PRODUCT_CANCE":                     12,
	"WAIT_GUARANTEE":                    13,
	"WAIT_TRUSTEESHIP":                  14,
	"REFUSE_GUARANTEE":                  15,
	"REFUSE_TRUSTEESHIP":                16,
	"WAIT_EXAMINE":                      17,
	"REFUSE_EXAMINE":                    18,
	"ON_HOLD":                           19,
	"ON_LISTING":                        20,
	"ON_LISTING_DELISTING":              21,
	"WAIT_FOR_LIQUIDATION":              22,
	"SUCCESS_RELEASE":                   23,
	"FAIL_RELEASE":                      24,
	"SUCCESS_PAYMENT":                   25,
	"IN_AUDIT_SUCCESS":                  26,
	"OUT_AUDIT2_BANK_SUCCESS":           27,
	"OUT_AUDIT2_BANK_FAIL":              28,
	"OUT_AUDIT1_SUCCESS":                29,
	"OUT_AUDIT1_FAIL":                   30,
	"OUT_WAIT_AUDIT1":                   31,
	"CLEAR_SUCCESS":                     34,
	"CLEAR_FALSE":                       35,
	"PASS_EXAMINE":                      38,
	"BILL_OVERDUE":                      39,
	"BILL_EXPIRE":                       40,
	"PLEDGE_BILL_LISTING":               41,
	"PLEDGE_BILL_LISTING_FINISH":        42,
	"PLEDGE_BILL_HOLDING":               43,
	"PLEDGE_BILL_APPLYING":              44,
	"PLEDGE_BILL_IOUS":                  45,
	"CONTRACT_BILL_WAIT_SUBSCRIBE":      46,
	"CONTRACT_BILL_LIST_FINISH":         47,
	"CONTRACT_BILL_IN_SUBSCRIBE":        48,
	"CONTRACT_BILL_FINISH_SUBSCRIBE":    49,
	"CONTRACT_BILL_HOLDING":             50,
	"BILL_PAY_FROZEN":                   51,
	"BILL_PAY_FINISH":                   52,
	"BILL_PAY_CANCEL":                   53,
	"PLEDGE_BILL_APPLYING_REFUSE":       54,
	"HAD_CASH_FINISH":                   55,
	"BILL_INVALID":                      56,
	"BILL_IN_TRANSFER":                  57,
	"BILL_TRANSFER_FINISH":              58,
	"WAITING_HONOUR":                    59,
	"BILL_APPLYING_IOU":                 60,
	"APPLY_OK":                          61,
	"APPLY_REJECT":                      62,
	"IOU_FROZEN":                        63,
	"IOU_PAYMENT_REVOCATION":            64,
	"IOU_EXPIRED":                       65,
	"IOU_PAYMENT":                       66,
	"PAY_SUCCESS":                       67,
	"IOU_OVERDUE":                       68,
	"WAIT_PAY":                          69,
	"IOU_PAYMENT_HAVE_REVOCATION":       70,
	"ALL_CASH_FINISH":                   71,
	"IOU_APPLY_REVOKED":                 72,
	"BLANK_NOTE_INVALID":                80,
	"BLANK_NOTE_IN_APPLYING":            81,
	"CORE_REFUSE_CONFIRM_BLANK_NOTE":    82,
	"WAIT_BANK_CONFIRM_BLANK_NOTE":      83,
	"WAIT_INVEST_CONFIRM_BLANK_NOTE":    84,
	"BANK_REFUSE_CONFIRM_BLANK_NOTE":    85,
	"INVEST_REFUSE_CONFIRM_BLANK_NOTE":  86,
	"BANK_AGREE_CONFIRM_BLANK_NOTE":     87,
	"INVEST_AGREE_CONFIRM_BLANK_NOTE":   88,
	"DOWN_HOLD_BLANK_NOTE":              89,
	"CORE_HOLD_BLANK_NOTE":              90,
	"BLANK_HAD_HONOUR":                  91,
	"FUND_BANK":                         92,
	"FUND_INVEST":                       93,
	"PAYMENT_ONLINE":                    94,
	"PAYMENT_OFFLINE":                   95,
	"APPLY_HONOUR":                      96,
	"EXPIRE":                            97,
	"OVERDUE":                           98,
	"PAYMENT_INVALID":                   99,
	"WAIT_CORE_CONFIRM_PAYMENT":         100,
	"CORE_REFUSE_CONFIRM_PAYMENT":       101,
	"DOWN_HOLDING_PAYMENT":              102,
	"ADVANCE_BLANK_IN_APPLYING":         103,
	"ADVANCE_BLANK_FINISH_APPLYING":     104,
	"INVEST_HOLD_ADVANCE":               105,
	"DOWN_ADVANCE_WAIT_HONOUR":          106,
	"ADVANCE_PAYMENT_HAD_HONOUR":        107,
	"IN_APPLYING":                       108,
	"FINISH_APPLY":                      109,
	"UN_FINISH":                         110,
	"HAD_FINISH":                        111,
	"DIRECTIONAL_BILL_LIST_FINISH":      112,
	"DIRECTIONAL_BILL_FINISH_SUBSCRIBE": 113,
	"DIRECTIONAL_BILL_CANCLE":           114,
	"DIRECTIONAL_BILL_REFUSE":           115,
}

func (x ZsgjState) String() string {
	return proto.EnumName(ZsgjState_name, int32(x))
}
func (ZsgjState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OperationType int32

const (
	OperationType_UNKNOW_OP               OperationType = 0
	OperationType_ADD_BILL                OperationType = 1
	OperationType_CANCEL_ADD_BILL         OperationType = 2
	OperationType_UPDATE_BILL             OperationType = 3
	OperationType_CONFIRM_AGREE_SIGN      OperationType = 4
	OperationType_REFUSE_SIGN             OperationType = 5
	OperationType_TRANSFER_WAIT_CONFIRM   OperationType = 6
	OperationType_TRANSFER_EDIT           OperationType = 7
	OperationType_AGREE_TRANSFER_CONFIRM  OperationType = 8
	OperationType_REFUSE_TRANSFER_CONFIRM OperationType = 9
	OperationType_WAIT_TRANSFER_SIGN      OperationType = 10
	OperationType_AGREE_TRANSFER_SIGN     OperationType = 11
	OperationType_REFUSE_TRANSFER_SIGN    OperationType = 12
	OperationType_CANCEL_TRANSFER_CONFIRM OperationType = 13
	OperationType_TRANSFER_TO_PRODUCT     OperationType = 14
	// 等待核心企业确认的状态时上游企业可以撤销
	OperationType_TOP_CANCLE_CONFIRM OperationType = 15
	OperationType_UPDATE_PRODUCT     OperationType = 16
	// 产品部分操作状态
	OperationType_AGREE_TO_GUARANTEE  OperationType = 17
	OperationType_REFUSE_TO_GUARANTEE OperationType = 18
	OperationType_AGREE_TO_TRUST      OperationType = 19
	OperationType_REFUSE_TO_TRUST     OperationType = 20
	// 发行机构撤销操作
	OperationType_ISSUER_REVOKE OperationType = 21
	// 发行机构挂牌操作
	OperationType_ISSUER_LISTING_CONFIRM OperationType = 22
	// 发行机构撤牌操作
	OperationType_ISSUER_WITHDRAWAL OperationType = 23
	// 提前兑付
	OperationType_OP_ADVANCE_PAYMENT OperationType = 24
	// 到期兑付
	OperationType_OP_EXPIRE_PAYMENT OperationType = 25
	// 逾期兑付
	OperationType_OP_OVERDUE_PAYMENT OperationType = 26
	//
	OperationType_OPERATION_SUCCESS OperationType = 27
	OperationType_OPERATION_FAIL    OperationType = 28
	OperationType_PRODUCT_DELISTING OperationType = 29
	OperationType_BILL_DELISTING    OperationType = 30
	// 提现操作
	OperationType_WITHDRAW_APPLY OperationType = 31
	// 白条
	OperationType_IOU_APPLY              OperationType = 32
	OperationType_IOU_APPLY_AGAIN        OperationType = 33
	OperationType_IOU_APPLY_REVOKE       OperationType = 34
	OperationType_IOU_PAY                OperationType = 35
	OperationType_IOU_PAY_CONFIRM        OperationType = 36
	OperationType_IOU_PAY_REVOKE         OperationType = 37
	OperationType_IOU_AGREE_PAY_REVOKE   OperationType = 38
	OperationType_IOU__REJECT_PAY_REVOKE OperationType = 39
	OperationType_IOU_APPLY_CASH         OperationType = 40
	OperationType_IOU_AGREE_APPLICATION  OperationType = 41
	OperationType_IOU_REFUSE_APPLICATION OperationType = 42
	OperationType_SET_CREDIT             OperationType = 43
	OperationType_UPDATE_CREDIT          OperationType = 44
	OperationType_BILL_LIST              OperationType = 45
	OperationType_BILL_CANCEL_LIST       OperationType = 46
	OperationType_IOU_ADVANCE_PAYMENT    OperationType = 47
	OperationType_IOU_EXPIRE_PAYMENT     OperationType = 48
	OperationType_IOU_OVERDUE_PAYMENT    OperationType = 49
	// 单据支付兑付相关操作
	OperationType_BILL_HANDLE_PAY        OperationType = 50
	OperationType_BILL_CONFIRM_PAY       OperationType = 51
	OperationType_BILL_CANCEL_PAY        OperationType = 52
	OperationType_BILL_AGREE_CANCEL_PAY  OperationType = 53
	OperationType_BILL_REFUSE_CANCEL_PAY OperationType = 54
	OperationType_BILL_APPLY_HONOUR      OperationType = 55
	OperationType_BILL_ADVANCE_PAYMENT   OperationType = 56
	OperationType_BILL_EXPIRE_PAYMENT    OperationType = 57
	OperationType_BILL_OVERDUE_PAYMENT   OperationType = 58
	// 预付款操作
	OperationType_OP_ADANCE_REG               OperationType = 60
	OperationType_OP_ADANCE_CORE_AGREE        OperationType = 61
	OperationType_OP_ADANCE_CORE_REJECT       OperationType = 62
	OperationType_OP_ADANCE_EDIT              OperationType = 63
	OperationType_OP_ADANCE_CACEL             OperationType = 64
	OperationType_OP_ADANCE_APPLY_IOU         OperationType = 65
	OperationType_OP_ADANCE_CORE_REJECT_IOU   OperationType = 66
	OperationType_OP_ADANCE_EDIT_IOU          OperationType = 67
	OperationType_OP_ADANCE_CANCEL_IOU        OperationType = 68
	OperationType_OP_ADANCE_INVEST_AGREE_IOU  OperationType = 69
	OperationType_OP_ADANCE_INVEST_REJECT_IOU OperationType = 70
	OperationType_OP_ADANCE_INVEST_CASH       OperationType = 71
	OperationType_OP_ADANCE_CORE_CASH_IOU     OperationType = 72
	OperationType_OP_ADANCE_DOWN_PAY          OperationType = 73
	OperationType_OP_ADANCE_INVEST_PAY_IOU    OperationType = 74
	// 单据定向融资
	OperationType_DIRECTIONAL_BILL               OperationType = 75
	OperationType_DIRECTIONAL_BILL_DELISTING     OperationType = 76
	OperationType_DIRECTIONAL_BILL_CANCEL_LIST   OperationType = 77
	OperationType_DIRECTIONAL_BILL_INVEST_REFUSE OperationType = 78
)

var OperationType_name = map[int32]string{
	0:  "UNKNOW_OP",
	1:  "ADD_BILL",
	2:  "CANCEL_ADD_BILL",
	3:  "UPDATE_BILL",
	4:  "CONFIRM_AGREE_SIGN",
	5:  "REFUSE_SIGN",
	6:  "TRANSFER_WAIT_CONFIRM",
	7:  "TRANSFER_EDIT",
	8:  "AGREE_TRANSFER_CONFIRM",
	9:  "REFUSE_TRANSFER_CONFIRM",
	10: "WAIT_TRANSFER_SIGN",
	11: "AGREE_TRANSFER_SIGN",
	12: "REFUSE_TRANSFER_SIGN",
	13: "CANCEL_TRANSFER_CONFIRM",
	14: "TRANSFER_TO_PRODUCT",
	15: "TOP_CANCLE_CONFIRM",
	16: "UPDATE_PRODUCT",
	17: "AGREE_TO_GUARANTEE",
	18: "REFUSE_TO_GUARANTEE",
	19: "AGREE_TO_TRUST",
	20: "REFUSE_TO_TRUST",
	21: "ISSUER_REVOKE",
	22: "ISSUER_LISTING_CONFIRM",
	23: "ISSUER_WITHDRAWAL",
	24: "OP_ADVANCE_PAYMENT",
	25: "OP_EXPIRE_PAYMENT",
	26: "OP_OVERDUE_PAYMENT",
	27: "OPERATION_SUCCESS",
	28: "OPERATION_FAIL",
	29: "PRODUCT_DELISTING",
	30: "BILL_DELISTING",
	31: "WITHDRAW_APPLY",
	32: "IOU_APPLY",
	33: "IOU_APPLY_AGAIN",
	34: "IOU_APPLY_REVOKE",
	35: "IOU_PAY",
	36: "IOU_PAY_CONFIRM",
	37: "IOU_PAY_REVOKE",
	38: "IOU_AGREE_PAY_REVOKE",
	39: "IOU__REJECT_PAY_REVOKE",
	40: "IOU_APPLY_CASH",
	41: "IOU_AGREE_APPLICATION",
	42: "IOU_REFUSE_APPLICATION",
	43: "SET_CREDIT",
	44: "UPDATE_CREDIT",
	45: "BILL_LIST",
	46: "BILL_CANCEL_LIST",
	47: "IOU_ADVANCE_PAYMENT",
	48: "IOU_EXPIRE_PAYMENT",
	49: "IOU_OVERDUE_PAYMENT",
	50: "BILL_HANDLE_PAY",
	51: "BILL_CONFIRM_PAY",
	52: "BILL_CANCEL_PAY",
	53: "BILL_AGREE_CANCEL_PAY",
	54: "BILL_REFUSE_CANCEL_PAY",
	55: "BILL_APPLY_HONOUR",
	56: "BILL_ADVANCE_PAYMENT",
	57: "BILL_EXPIRE_PAYMENT",
	58: "BILL_OVERDUE_PAYMENT",
	60: "OP_ADANCE_REG",
	61: "OP_ADANCE_CORE_AGREE",
	62: "OP_ADANCE_CORE_REJECT",
	63: "OP_ADANCE_EDIT",
	64: "OP_ADANCE_CACEL",
	65: "OP_ADANCE_APPLY_IOU",
	66: "OP_ADANCE_CORE_REJECT_IOU",
	67: "OP_ADANCE_EDIT_IOU",
	68: "OP_ADANCE_CANCEL_IOU",
	69: "OP_ADANCE_INVEST_AGREE_IOU",
	70: "OP_ADANCE_INVEST_REJECT_IOU",
	71: "OP_ADANCE_INVEST_CASH",
	72: "OP_ADANCE_CORE_CASH_IOU",
	73: "OP_ADANCE_DOWN_PAY",
	74: "OP_ADANCE_INVEST_PAY_IOU",
	75: "DIRECTIONAL_BILL",
	76: "DIRECTIONAL_BILL_DELISTING",
	77: "DIRECTIONAL_BILL_CANCEL_LIST",
	78: "DIRECTIONAL_BILL_INVEST_REFUSE",
}
var OperationType_value = map[string]int32{
	"UNKNOW_OP":                      0,
	"ADD_BILL":                       1,
	"CANCEL_ADD_BILL":                2,
	"UPDATE_BILL":                    3,
	"CONFIRM_AGREE_SIGN":             4,
	"REFUSE_SIGN":                    5,
	"TRANSFER_WAIT_CONFIRM":          6,
	"TRANSFER_EDIT":                  7,
	"AGREE_TRANSFER_CONFIRM":         8,
	"REFUSE_TRANSFER_CONFIRM":        9,
	"WAIT_TRANSFER_SIGN":             10,
	"AGREE_TRANSFER_SIGN":            11,
	"REFUSE_TRANSFER_SIGN":           12,
	"CANCEL_TRANSFER_CONFIRM":        13,
	"TRANSFER_TO_PRODUCT":            14,
	"TOP_CANCLE_CONFIRM":             15,
	"UPDATE_PRODUCT":                 16,
	"AGREE_TO_GUARANTEE":             17,
	"REFUSE_TO_GUARANTEE":            18,
	"AGREE_TO_TRUST":                 19,
	"REFUSE_TO_TRUST":                20,
	"ISSUER_REVOKE":                  21,
	"ISSUER_LISTING_CONFIRM":         22,
	"ISSUER_WITHDRAWAL":              23,
	"OP_ADVANCE_PAYMENT":             24,
	"OP_EXPIRE_PAYMENT":              25,
	"OP_OVERDUE_PAYMENT":             26,
	"OPERATION_SUCCESS":              27,
	"OPERATION_FAIL":                 28,
	"PRODUCT_DELISTING":              29,
	"BILL_DELISTING":                 30,
	"WITHDRAW_APPLY":                 31,
	"IOU_APPLY":                      32,
	"IOU_APPLY_AGAIN":                33,
	"IOU_APPLY_REVOKE":               34,
	"IOU_PAY":                        35,
	"IOU_PAY_CONFIRM":                36,
	"IOU_PAY_REVOKE":                 37,
	"IOU_AGREE_PAY_REVOKE":           38,
	"IOU__REJECT_PAY_REVOKE":         39,
	"IOU_APPLY_CASH":                 40,
	"IOU_AGREE_APPLICATION":          41,
	"IOU_REFUSE_APPLICATION":         42,
	"SET_CREDIT":                     43,
	"UPDATE_CREDIT":                  44,
	"BILL_LIST":                      45,
	"BILL_CANCEL_LIST":               46,
	"IOU_ADVANCE_PAYMENT":            47,
	"IOU_EXPIRE_PAYMENT":             48,
	"IOU_OVERDUE_PAYMENT":            49,
	"BILL_HANDLE_PAY":                50,
	"BILL_CONFIRM_PAY":               51,
	"BILL_CANCEL_PAY":                52,
	"BILL_AGREE_CANCEL_PAY":          53,
	"BILL_REFUSE_CANCEL_PAY":         54,
	"BILL_APPLY_HONOUR":              55,
	"BILL_ADVANCE_PAYMENT":           56,
	"BILL_EXPIRE_PAYMENT":            57,
	"BILL_OVERDUE_PAYMENT":           58,
	"OP_ADANCE_REG":                  60,
	"OP_ADANCE_CORE_AGREE":           61,
	"OP_ADANCE_CORE_REJECT":          62,
	"OP_ADANCE_EDIT":                 63,
	"OP_ADANCE_CACEL":                64,
	"OP_ADANCE_APPLY_IOU":            65,
	"OP_ADANCE_CORE_REJECT_IOU":      66,
	"OP_ADANCE_EDIT_IOU":             67,
	"OP_ADANCE_CANCEL_IOU":           68,
	"OP_ADANCE_INVEST_AGREE_IOU":     69,
	"OP_ADANCE_INVEST_REJECT_IOU":    70,
	"OP_ADANCE_INVEST_CASH":          71,
	"OP_ADANCE_CORE_CASH_IOU":        72,
	"OP_ADANCE_DOWN_PAY":             73,
	"OP_ADANCE_INVEST_PAY_IOU":       74,
	"DIRECTIONAL_BILL":               75,
	"DIRECTIONAL_BILL_DELISTING":     76,
	"DIRECTIONAL_BILL_CANCEL_LIST":   77,
	"DIRECTIONAL_BILL_INVEST_REFUSE": 78,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (OperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 预付款
type AdanceInfo struct {
	AdanceId     string        `protobuf:"bytes,1,opt,name=adanceId" json:"adanceId,omitempty"`
	CoreCompany  *Enterprise   `protobuf:"bytes,2,opt,name=coreCompany" json:"coreCompany,omitempty"`
	DownCompany  *Enterprise   `protobuf:"bytes,3,opt,name=downCompany" json:"downCompany,omitempty"`
	OrderAmount  int64         `protobuf:"varint,4,opt,name=orderAmount" json:"orderAmount,omitempty"`
	SignDate     int64         `protobuf:"varint,5,opt,name=signDate" json:"signDate,omitempty"`
	EndDate      int64         `protobuf:"varint,6,opt,name=endDate" json:"endDate,omitempty"`
	GoodsNums    int64         `protobuf:"varint,7,opt,name=goodsNums" json:"goodsNums,omitempty"`
	GoodsDate    int64         `protobuf:"varint,8,opt,name=goodsDate" json:"goodsDate,omitempty"`
	GoodsName    string        `protobuf:"bytes,9,opt,name=goodsName" json:"goodsName,omitempty"`
	State        ZsgjState     `protobuf:"varint,10,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty         OperationType `protobuf:"varint,11,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	Rate         int64         `protobuf:"varint,12,opt,name=rate" json:"rate,omitempty"`
	OwnerCompany *Enterprise   `protobuf:"bytes,13,opt,name=ownerCompany" json:"ownerCompany,omitempty"`
}

func (m *AdanceInfo) Reset()                    { *m = AdanceInfo{} }
func (m *AdanceInfo) String() string            { return proto.CompactTextString(m) }
func (*AdanceInfo) ProtoMessage()               {}
func (*AdanceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AdanceInfo) GetAdanceId() string {
	if m != nil {
		return m.AdanceId
	}
	return ""
}

func (m *AdanceInfo) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *AdanceInfo) GetDownCompany() *Enterprise {
	if m != nil {
		return m.DownCompany
	}
	return nil
}

func (m *AdanceInfo) GetOrderAmount() int64 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *AdanceInfo) GetSignDate() int64 {
	if m != nil {
		return m.SignDate
	}
	return 0
}

func (m *AdanceInfo) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *AdanceInfo) GetGoodsNums() int64 {
	if m != nil {
		return m.GoodsNums
	}
	return 0
}

func (m *AdanceInfo) GetGoodsDate() int64 {
	if m != nil {
		return m.GoodsDate
	}
	return 0
}

func (m *AdanceInfo) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *AdanceInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *AdanceInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *AdanceInfo) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AdanceInfo) GetOwnerCompany() *Enterprise {
	if m != nil {
		return m.OwnerCompany
	}
	return nil
}

// 单据-
type ZsgjReceipt struct {
	RegisterDate   int64         `protobuf:"varint,1,opt,name=registerDate" json:"registerDate,omitempty"`
	CoreCompany    *Enterprise   `protobuf:"bytes,2,opt,name=coreCompany" json:"coreCompany,omitempty"`
	ReceiveCompany *Enterprise   `protobuf:"bytes,3,opt,name=receiveCompany" json:"receiveCompany,omitempty"`
	SumAmount      int64         `protobuf:"varint,4,opt,name=sumAmount" json:"sumAmount,omitempty"`
	StartDate      int64         `protobuf:"varint,5,opt,name=startDate" json:"startDate,omitempty"`
	EndDate        int64         `protobuf:"varint,6,opt,name=endDate" json:"endDate,omitempty"`
	IssuedAgency   *Enterprise   `protobuf:"bytes,7,opt,name=issuedAgency" json:"issuedAgency,omitempty"`
	State          ZsgjState     `protobuf:"varint,8,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Info           string        `protobuf:"bytes,9,opt,name=info" json:"info,omitempty"`
	Opty           OperationType `protobuf:"varint,10,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany      *Enterprise   `protobuf:"bytes,11,opt,name=opCompany" json:"opCompany,omitempty"`
	ReceiptId      string        `protobuf:"bytes,12,opt,name=receiptId" json:"receiptId,omitempty"`
	InvestAgency   *Enterprise   `protobuf:"bytes,13,opt,name=investAgency" json:"investAgency,omitempty"`
	Rate           int64         `protobuf:"varint,14,opt,name=rate" json:"rate,omitempty"`
	ReceiptViceId  string        `protobuf:"bytes,15,opt,name=receiptViceId" json:"receiptViceId,omitempty"`
	FinanceAmount  int64         `protobuf:"varint,16,opt,name=financeAmount" json:"financeAmount,omitempty"`
}

func (m *ZsgjReceipt) Reset()                    { *m = ZsgjReceipt{} }
func (m *ZsgjReceipt) String() string            { return proto.CompactTextString(m) }
func (*ZsgjReceipt) ProtoMessage()               {}
func (*ZsgjReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ZsgjReceipt) GetRegisterDate() int64 {
	if m != nil {
		return m.RegisterDate
	}
	return 0
}

func (m *ZsgjReceipt) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *ZsgjReceipt) GetReceiveCompany() *Enterprise {
	if m != nil {
		return m.ReceiveCompany
	}
	return nil
}

func (m *ZsgjReceipt) GetSumAmount() int64 {
	if m != nil {
		return m.SumAmount
	}
	return 0
}

func (m *ZsgjReceipt) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *ZsgjReceipt) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *ZsgjReceipt) GetIssuedAgency() *Enterprise {
	if m != nil {
		return m.IssuedAgency
	}
	return nil
}

func (m *ZsgjReceipt) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjReceipt) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ZsgjReceipt) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjReceipt) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *ZsgjReceipt) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *ZsgjReceipt) GetInvestAgency() *Enterprise {
	if m != nil {
		return m.InvestAgency
	}
	return nil
}

func (m *ZsgjReceipt) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *ZsgjReceipt) GetReceiptViceId() string {
	if m != nil {
		return m.ReceiptViceId
	}
	return ""
}

func (m *ZsgjReceipt) GetFinanceAmount() int64 {
	if m != nil {
		return m.FinanceAmount
	}
	return 0
}

// 产品详情-
type ZsgjProduct struct {
	ProductId                   string        `protobuf:"bytes,1,opt,name=productId" json:"productId,omitempty"`
	ProductName                 string        `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty"`
	AnnualizedRate              int32         `protobuf:"varint,4,opt,name=annualizedRate" json:"annualizedRate,omitempty"`
	IssuedAgency                *Enterprise   `protobuf:"bytes,5,opt,name=issuedAgency" json:"issuedAgency,omitempty"`
	Frequency                   string        `protobuf:"bytes,6,opt,name=frequency" json:"frequency,omitempty"`
	PayInterestMethod           string        `protobuf:"bytes,7,opt,name=payInterestMethod" json:"payInterestMethod,omitempty"`
	CalInterestMethod           string        `protobuf:"bytes,8,opt,name=calInterestMethod" json:"calInterestMethod,omitempty"`
	CoinType                    string        `protobuf:"bytes,9,opt,name=coinType" json:"coinType,omitempty"`
	GuaranteeAgency             *Enterprise   `protobuf:"bytes,10,opt,name=guaranteeAgency" json:"guaranteeAgency,omitempty"`
	HostingAgency               *Enterprise   `protobuf:"bytes,11,opt,name=hostingAgency" json:"hostingAgency,omitempty"`
	IssueScale                  int64         `protobuf:"varint,12,opt,name=issueScale" json:"issueScale,omitempty"`
	SaleTarget                  string        `protobuf:"bytes,13,opt,name=saleTarget" json:"saleTarget,omitempty"`
	RiskLevel                   string        `protobuf:"bytes,14,opt,name=riskLevel" json:"riskLevel,omitempty"`
	RaiseStartDate              int64         `protobuf:"varint,15,opt,name=raiseStartDate" json:"raiseStartDate,omitempty"`
	RaiseEndDate                int64         `protobuf:"varint,16,opt,name=raiseEndDate" json:"raiseEndDate,omitempty"`
	CalInterestStart            int64         `protobuf:"varint,17,opt,name=calInterestStart" json:"calInterestStart,omitempty"`
	CalInterestEnd              int64         `protobuf:"varint,18,opt,name=calInterestEnd" json:"calInterestEnd,omitempty"`
	StartAmount                 int64         `protobuf:"varint,20,opt,name=startAmount" json:"startAmount,omitempty"`
	IncreamentingAmount         int64         `protobuf:"varint,21,opt,name=increamentingAmount" json:"increamentingAmount,omitempty"`
	SubscriptionPerson          int64         `protobuf:"varint,22,opt,name=subscriptionPerson" json:"subscriptionPerson,omitempty"`
	IsTranferable               bool          `protobuf:"varint,23,opt,name=isTranferable" json:"isTranferable,omitempty"`
	Info                        string        `protobuf:"bytes,24,opt,name=info" json:"info,omitempty"`
	TransferStart               int64         `protobuf:"varint,25,opt,name=transferStart" json:"transferStart,omitempty"`
	TransferEnd                 int64         `protobuf:"varint,26,opt,name=transferEnd" json:"transferEnd,omitempty"`
	MinHoldingDuration          int64         `protobuf:"varint,27,opt,name=minHoldingDuration" json:"minHoldingDuration,omitempty"`
	IstransferRateFloat         bool          `protobuf:"varint,28,opt,name=istransferRateFloat" json:"istransferRateFloat,omitempty"`
	MinTransferAmount           int64         `protobuf:"varint,29,opt,name=minTransferAmount" json:"minTransferAmount,omitempty"`
	RateFloatInterregional      string        `protobuf:"bytes,30,opt,name=rateFloatInterregional" json:"rateFloatInterregional,omitempty"`
	TransferIncreamentingAmount int64         `protobuf:"varint,31,opt,name=transferIncreamentingAmount" json:"transferIncreamentingAmount,omitempty"`
	TransferFeeTarget           string        `protobuf:"bytes,32,opt,name=transferFeeTarget" json:"transferFeeTarget,omitempty"`
	State                       ZsgjState     `protobuf:"varint,33,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty                        OperationType `protobuf:"varint,34,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany                   *Enterprise   `protobuf:"bytes,35,opt,name=opCompany" json:"opCompany,omitempty"`
	ReceiptId                   string        `protobuf:"bytes,36,opt,name=receiptId" json:"receiptId,omitempty"`
}

func (m *ZsgjProduct) Reset()                    { *m = ZsgjProduct{} }
func (m *ZsgjProduct) String() string            { return proto.CompactTextString(m) }
func (*ZsgjProduct) ProtoMessage()               {}
func (*ZsgjProduct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ZsgjProduct) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ZsgjProduct) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ZsgjProduct) GetAnnualizedRate() int32 {
	if m != nil {
		return m.AnnualizedRate
	}
	return 0
}

func (m *ZsgjProduct) GetIssuedAgency() *Enterprise {
	if m != nil {
		return m.IssuedAgency
	}
	return nil
}

func (m *ZsgjProduct) GetFrequency() string {
	if m != nil {
		return m.Frequency
	}
	return ""
}

func (m *ZsgjProduct) GetPayInterestMethod() string {
	if m != nil {
		return m.PayInterestMethod
	}
	return ""
}

func (m *ZsgjProduct) GetCalInterestMethod() string {
	if m != nil {
		return m.CalInterestMethod
	}
	return ""
}

func (m *ZsgjProduct) GetCoinType() string {
	if m != nil {
		return m.CoinType
	}
	return ""
}

func (m *ZsgjProduct) GetGuaranteeAgency() *Enterprise {
	if m != nil {
		return m.GuaranteeAgency
	}
	return nil
}

func (m *ZsgjProduct) GetHostingAgency() *Enterprise {
	if m != nil {
		return m.HostingAgency
	}
	return nil
}

func (m *ZsgjProduct) GetIssueScale() int64 {
	if m != nil {
		return m.IssueScale
	}
	return 0
}

func (m *ZsgjProduct) GetSaleTarget() string {
	if m != nil {
		return m.SaleTarget
	}
	return ""
}

func (m *ZsgjProduct) GetRiskLevel() string {
	if m != nil {
		return m.RiskLevel
	}
	return ""
}

func (m *ZsgjProduct) GetRaiseStartDate() int64 {
	if m != nil {
		return m.RaiseStartDate
	}
	return 0
}

func (m *ZsgjProduct) GetRaiseEndDate() int64 {
	if m != nil {
		return m.RaiseEndDate
	}
	return 0
}

func (m *ZsgjProduct) GetCalInterestStart() int64 {
	if m != nil {
		return m.CalInterestStart
	}
	return 0
}

func (m *ZsgjProduct) GetCalInterestEnd() int64 {
	if m != nil {
		return m.CalInterestEnd
	}
	return 0
}

func (m *ZsgjProduct) GetStartAmount() int64 {
	if m != nil {
		return m.StartAmount
	}
	return 0
}

func (m *ZsgjProduct) GetIncreamentingAmount() int64 {
	if m != nil {
		return m.IncreamentingAmount
	}
	return 0
}

func (m *ZsgjProduct) GetSubscriptionPerson() int64 {
	if m != nil {
		return m.SubscriptionPerson
	}
	return 0
}

func (m *ZsgjProduct) GetIsTranferable() bool {
	if m != nil {
		return m.IsTranferable
	}
	return false
}

func (m *ZsgjProduct) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ZsgjProduct) GetTransferStart() int64 {
	if m != nil {
		return m.TransferStart
	}
	return 0
}

func (m *ZsgjProduct) GetTransferEnd() int64 {
	if m != nil {
		return m.TransferEnd
	}
	return 0
}

func (m *ZsgjProduct) GetMinHoldingDuration() int64 {
	if m != nil {
		return m.MinHoldingDuration
	}
	return 0
}

func (m *ZsgjProduct) GetIstransferRateFloat() bool {
	if m != nil {
		return m.IstransferRateFloat
	}
	return false
}

func (m *ZsgjProduct) GetMinTransferAmount() int64 {
	if m != nil {
		return m.MinTransferAmount
	}
	return 0
}

func (m *ZsgjProduct) GetRateFloatInterregional() string {
	if m != nil {
		return m.RateFloatInterregional
	}
	return ""
}

func (m *ZsgjProduct) GetTransferIncreamentingAmount() int64 {
	if m != nil {
		return m.TransferIncreamentingAmount
	}
	return 0
}

func (m *ZsgjProduct) GetTransferFeeTarget() string {
	if m != nil {
		return m.TransferFeeTarget
	}
	return ""
}

func (m *ZsgjProduct) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjProduct) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjProduct) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *ZsgjProduct) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

// 账户
type ZsgjAccount struct {
	CompanyName string     `protobuf:"bytes,1,opt,name=companyName" json:"companyName,omitempty"`
	Rmb         *RmbAssets `protobuf:"bytes,2,opt,name=rmb" json:"rmb,omitempty"`
}

func (m *ZsgjAccount) Reset()                    { *m = ZsgjAccount{} }
func (m *ZsgjAccount) String() string            { return proto.CompactTextString(m) }
func (*ZsgjAccount) ProtoMessage()               {}
func (*ZsgjAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ZsgjAccount) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ZsgjAccount) GetRmb() *RmbAssets {
	if m != nil {
		return m.Rmb
	}
	return nil
}

type ZsgjRoleAccount struct {
	Enterprise      *Enterprise      `protobuf:"bytes,1,opt,name=enterprise" json:"enterprise,omitempty"`
	ReceiptAssets   *ReceiptAssets   `protobuf:"bytes,2,opt,name=receiptAssets" json:"receiptAssets,omitempty"`
	ProductAssets   *ProductAssets   `protobuf:"bytes,3,opt,name=productAssets" json:"productAssets,omitempty"`
	BlankNoteAssets *BlankNoteAssets `protobuf:"bytes,4,opt,name=blankNoteAssets" json:"blankNoteAssets,omitempty"`
	AdanceAssets    *AdanceAssets    `protobuf:"bytes,5,opt,name=adanceAssets" json:"adanceAssets,omitempty"`
}

func (m *ZsgjRoleAccount) Reset()                    { *m = ZsgjRoleAccount{} }
func (m *ZsgjRoleAccount) String() string            { return proto.CompactTextString(m) }
func (*ZsgjRoleAccount) ProtoMessage()               {}
func (*ZsgjRoleAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ZsgjRoleAccount) GetEnterprise() *Enterprise {
	if m != nil {
		return m.Enterprise
	}
	return nil
}

func (m *ZsgjRoleAccount) GetReceiptAssets() *ReceiptAssets {
	if m != nil {
		return m.ReceiptAssets
	}
	return nil
}

func (m *ZsgjRoleAccount) GetProductAssets() *ProductAssets {
	if m != nil {
		return m.ProductAssets
	}
	return nil
}

func (m *ZsgjRoleAccount) GetBlankNoteAssets() *BlankNoteAssets {
	if m != nil {
		return m.BlankNoteAssets
	}
	return nil
}

func (m *ZsgjRoleAccount) GetAdanceAssets() *AdanceAssets {
	if m != nil {
		return m.AdanceAssets
	}
	return nil
}

type AllAccount struct {
	Account     *ZsgjAccount       `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	RoleAccount []*ZsgjRoleAccount `protobuf:"bytes,2,rep,name=roleAccount" json:"roleAccount,omitempty"`
}

func (m *AllAccount) Reset()                    { *m = AllAccount{} }
func (m *AllAccount) String() string            { return proto.CompactTextString(m) }
func (*AllAccount) ProtoMessage()               {}
func (*AllAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AllAccount) GetAccount() *ZsgjAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AllAccount) GetRoleAccount() []*ZsgjRoleAccount {
	if m != nil {
		return m.RoleAccount
	}
	return nil
}

type ZsgjAction struct {
	// Types that are valid to be assigned to Value:
	//	*ZsgjAction_ZsgjSaveReceipt
	//	*ZsgjAction_ZsgjSaveProduct
	//	*ZsgjAction_AssetRegister
	//	*ZsgjAction_ZsgjApplyRecharge
	//	*ZsgjAction_ZsgjApplyWithdraw
	//	*ZsgjAction_ZsgjCash
	//	*ZsgjAction_ZsgjClear
	//	*ZsgjAction_ZsgjDelist
	//	*ZsgjAction_ZsgjCompanyCertification
	//	*ZsgjAction_ZsgjPersonCertification
	//	*ZsgjAction_DlReceiptPay
	//	*ZsgjAction_DlReceiptDelist
	//	*ZsgjAction_DlBlankNote
	//	*ZsgjAction_DlReceiptList
	//	*ZsgjAction_DlBlankNotePay
	//	*ZsgjAction_DlReceiptAndNoteCash
	//	*ZsgjAction_DlInvestCash
	//	*ZsgjAction_DlCredit
	//	*ZsgjAction_AdAssetRegister
	//	*ZsgjAction_AdApplyBlankNote
	//	*ZsgjAction_AdAndNoteCash
	//	*ZsgjAction_GylFinanceInfo
	//	*ZsgjAction_GylDirectFinance
	Value isZsgjAction_Value `protobuf_oneof:"value"`
	Ty    int32              `protobuf:"varint,50,opt,name=Ty" json:"Ty,omitempty"`
}

func (m *ZsgjAction) Reset()                    { *m = ZsgjAction{} }
func (m *ZsgjAction) String() string            { return proto.CompactTextString(m) }
func (*ZsgjAction) ProtoMessage()               {}
func (*ZsgjAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isZsgjAction_Value interface {
	isZsgjAction_Value()
}

type ZsgjAction_ZsgjSaveReceipt struct {
	ZsgjSaveReceipt *ZsgjSaveReceipt `protobuf:"bytes,1,opt,name=zsgjSaveReceipt,oneof"`
}
type ZsgjAction_ZsgjSaveProduct struct {
	ZsgjSaveProduct *ZsgjSaveProduct `protobuf:"bytes,2,opt,name=zsgjSaveProduct,oneof"`
}
type ZsgjAction_AssetRegister struct {
	AssetRegister *AssetRegisterAction `protobuf:"bytes,3,opt,name=assetRegister,oneof"`
}
type ZsgjAction_ZsgjApplyRecharge struct {
	ZsgjApplyRecharge *ZsgjApplyRecharge `protobuf:"bytes,4,opt,name=zsgjApplyRecharge,oneof"`
}
type ZsgjAction_ZsgjApplyWithdraw struct {
	ZsgjApplyWithdraw *ZsgjApplyWithdraw `protobuf:"bytes,5,opt,name=zsgjApplyWithdraw,oneof"`
}
type ZsgjAction_ZsgjCash struct {
	ZsgjCash *ZsgjCash `protobuf:"bytes,6,opt,name=zsgjCash,oneof"`
}
type ZsgjAction_ZsgjClear struct {
	ZsgjClear *ZsgjClear `protobuf:"bytes,7,opt,name=zsgjClear,oneof"`
}
type ZsgjAction_ZsgjDelist struct {
	ZsgjDelist *ZsgjDelist `protobuf:"bytes,8,opt,name=zsgjDelist,oneof"`
}
type ZsgjAction_ZsgjCompanyCertification struct {
	ZsgjCompanyCertification *ZsgjCompanyCertification `protobuf:"bytes,9,opt,name=zsgjCompanyCertification,oneof"`
}
type ZsgjAction_ZsgjPersonCertification struct {
	ZsgjPersonCertification *ZsgjPersonCertification `protobuf:"bytes,10,opt,name=zsgjPersonCertification,oneof"`
}
type ZsgjAction_DlReceiptPay struct {
	DlReceiptPay *DlReceiptPay `protobuf:"bytes,11,opt,name=dlReceiptPay,oneof"`
}
type ZsgjAction_DlReceiptDelist struct {
	DlReceiptDelist *DlReceiptDelist `protobuf:"bytes,12,opt,name=dlReceiptDelist,oneof"`
}
type ZsgjAction_DlBlankNote struct {
	DlBlankNote *DlBlankNote `protobuf:"bytes,13,opt,name=dlBlankNote,oneof"`
}
type ZsgjAction_DlReceiptList struct {
	DlReceiptList *DlReceiptList `protobuf:"bytes,14,opt,name=dlReceiptList,oneof"`
}
type ZsgjAction_DlBlankNotePay struct {
	DlBlankNotePay *DlBlankNotePay `protobuf:"bytes,15,opt,name=dlBlankNotePay,oneof"`
}
type ZsgjAction_DlReceiptAndNoteCash struct {
	DlReceiptAndNoteCash *DlReceiptAndNoteCash `protobuf:"bytes,16,opt,name=dlReceiptAndNoteCash,oneof"`
}
type ZsgjAction_DlInvestCash struct {
	DlInvestCash *DlInvestCash `protobuf:"bytes,17,opt,name=dlInvestCash,oneof"`
}
type ZsgjAction_DlCredit struct {
	DlCredit *DlCredit `protobuf:"bytes,18,opt,name=dlCredit,oneof"`
}
type ZsgjAction_AdAssetRegister struct {
	AdAssetRegister *AdAssetRegister `protobuf:"bytes,19,opt,name=adAssetRegister,oneof"`
}
type ZsgjAction_AdApplyBlankNote struct {
	AdApplyBlankNote *AdApplyBlankNote `protobuf:"bytes,20,opt,name=adApplyBlankNote,oneof"`
}
type ZsgjAction_AdAndNoteCash struct {
	AdAndNoteCash *AdAndNoteCash `protobuf:"bytes,21,opt,name=adAndNoteCash,oneof"`
}
type ZsgjAction_GylFinanceInfo struct {
	GylFinanceInfo *GylFinanceInfo `protobuf:"bytes,22,opt,name=gylFinanceInfo,oneof"`
}
type ZsgjAction_GylDirectFinance struct {
	GylDirectFinance *GylDirectFinance `protobuf:"bytes,23,opt,name=gylDirectFinance,oneof"`
}

func (*ZsgjAction_ZsgjSaveReceipt) isZsgjAction_Value()          {}
func (*ZsgjAction_ZsgjSaveProduct) isZsgjAction_Value()          {}
func (*ZsgjAction_AssetRegister) isZsgjAction_Value()            {}
func (*ZsgjAction_ZsgjApplyRecharge) isZsgjAction_Value()        {}
func (*ZsgjAction_ZsgjApplyWithdraw) isZsgjAction_Value()        {}
func (*ZsgjAction_ZsgjCash) isZsgjAction_Value()                 {}
func (*ZsgjAction_ZsgjClear) isZsgjAction_Value()                {}
func (*ZsgjAction_ZsgjDelist) isZsgjAction_Value()               {}
func (*ZsgjAction_ZsgjCompanyCertification) isZsgjAction_Value() {}
func (*ZsgjAction_ZsgjPersonCertification) isZsgjAction_Value()  {}
func (*ZsgjAction_DlReceiptPay) isZsgjAction_Value()             {}
func (*ZsgjAction_DlReceiptDelist) isZsgjAction_Value()          {}
func (*ZsgjAction_DlBlankNote) isZsgjAction_Value()              {}
func (*ZsgjAction_DlReceiptList) isZsgjAction_Value()            {}
func (*ZsgjAction_DlBlankNotePay) isZsgjAction_Value()           {}
func (*ZsgjAction_DlReceiptAndNoteCash) isZsgjAction_Value()     {}
func (*ZsgjAction_DlInvestCash) isZsgjAction_Value()             {}
func (*ZsgjAction_DlCredit) isZsgjAction_Value()                 {}
func (*ZsgjAction_AdAssetRegister) isZsgjAction_Value()          {}
func (*ZsgjAction_AdApplyBlankNote) isZsgjAction_Value()         {}
func (*ZsgjAction_AdAndNoteCash) isZsgjAction_Value()            {}
func (*ZsgjAction_GylFinanceInfo) isZsgjAction_Value()           {}
func (*ZsgjAction_GylDirectFinance) isZsgjAction_Value()         {}

func (m *ZsgjAction) GetValue() isZsgjAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ZsgjAction) GetZsgjSaveReceipt() *ZsgjSaveReceipt {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjSaveReceipt); ok {
		return x.ZsgjSaveReceipt
	}
	return nil
}

func (m *ZsgjAction) GetZsgjSaveProduct() *ZsgjSaveProduct {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjSaveProduct); ok {
		return x.ZsgjSaveProduct
	}
	return nil
}

func (m *ZsgjAction) GetAssetRegister() *AssetRegisterAction {
	if x, ok := m.GetValue().(*ZsgjAction_AssetRegister); ok {
		return x.AssetRegister
	}
	return nil
}

func (m *ZsgjAction) GetZsgjApplyRecharge() *ZsgjApplyRecharge {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjApplyRecharge); ok {
		return x.ZsgjApplyRecharge
	}
	return nil
}

func (m *ZsgjAction) GetZsgjApplyWithdraw() *ZsgjApplyWithdraw {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjApplyWithdraw); ok {
		return x.ZsgjApplyWithdraw
	}
	return nil
}

func (m *ZsgjAction) GetZsgjCash() *ZsgjCash {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjCash); ok {
		return x.ZsgjCash
	}
	return nil
}

func (m *ZsgjAction) GetZsgjClear() *ZsgjClear {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjClear); ok {
		return x.ZsgjClear
	}
	return nil
}

func (m *ZsgjAction) GetZsgjDelist() *ZsgjDelist {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjDelist); ok {
		return x.ZsgjDelist
	}
	return nil
}

func (m *ZsgjAction) GetZsgjCompanyCertification() *ZsgjCompanyCertification {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjCompanyCertification); ok {
		return x.ZsgjCompanyCertification
	}
	return nil
}

func (m *ZsgjAction) GetZsgjPersonCertification() *ZsgjPersonCertification {
	if x, ok := m.GetValue().(*ZsgjAction_ZsgjPersonCertification); ok {
		return x.ZsgjPersonCertification
	}
	return nil
}

func (m *ZsgjAction) GetDlReceiptPay() *DlReceiptPay {
	if x, ok := m.GetValue().(*ZsgjAction_DlReceiptPay); ok {
		return x.DlReceiptPay
	}
	return nil
}

func (m *ZsgjAction) GetDlReceiptDelist() *DlReceiptDelist {
	if x, ok := m.GetValue().(*ZsgjAction_DlReceiptDelist); ok {
		return x.DlReceiptDelist
	}
	return nil
}

func (m *ZsgjAction) GetDlBlankNote() *DlBlankNote {
	if x, ok := m.GetValue().(*ZsgjAction_DlBlankNote); ok {
		return x.DlBlankNote
	}
	return nil
}

func (m *ZsgjAction) GetDlReceiptList() *DlReceiptList {
	if x, ok := m.GetValue().(*ZsgjAction_DlReceiptList); ok {
		return x.DlReceiptList
	}
	return nil
}

func (m *ZsgjAction) GetDlBlankNotePay() *DlBlankNotePay {
	if x, ok := m.GetValue().(*ZsgjAction_DlBlankNotePay); ok {
		return x.DlBlankNotePay
	}
	return nil
}

func (m *ZsgjAction) GetDlReceiptAndNoteCash() *DlReceiptAndNoteCash {
	if x, ok := m.GetValue().(*ZsgjAction_DlReceiptAndNoteCash); ok {
		return x.DlReceiptAndNoteCash
	}
	return nil
}

func (m *ZsgjAction) GetDlInvestCash() *DlInvestCash {
	if x, ok := m.GetValue().(*ZsgjAction_DlInvestCash); ok {
		return x.DlInvestCash
	}
	return nil
}

func (m *ZsgjAction) GetDlCredit() *DlCredit {
	if x, ok := m.GetValue().(*ZsgjAction_DlCredit); ok {
		return x.DlCredit
	}
	return nil
}

func (m *ZsgjAction) GetAdAssetRegister() *AdAssetRegister {
	if x, ok := m.GetValue().(*ZsgjAction_AdAssetRegister); ok {
		return x.AdAssetRegister
	}
	return nil
}

func (m *ZsgjAction) GetAdApplyBlankNote() *AdApplyBlankNote {
	if x, ok := m.GetValue().(*ZsgjAction_AdApplyBlankNote); ok {
		return x.AdApplyBlankNote
	}
	return nil
}

func (m *ZsgjAction) GetAdAndNoteCash() *AdAndNoteCash {
	if x, ok := m.GetValue().(*ZsgjAction_AdAndNoteCash); ok {
		return x.AdAndNoteCash
	}
	return nil
}

func (m *ZsgjAction) GetGylFinanceInfo() *GylFinanceInfo {
	if x, ok := m.GetValue().(*ZsgjAction_GylFinanceInfo); ok {
		return x.GylFinanceInfo
	}
	return nil
}

func (m *ZsgjAction) GetGylDirectFinance() *GylDirectFinance {
	if x, ok := m.GetValue().(*ZsgjAction_GylDirectFinance); ok {
		return x.GylDirectFinance
	}
	return nil
}

func (m *ZsgjAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZsgjAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZsgjAction_OneofMarshaler, _ZsgjAction_OneofUnmarshaler, _ZsgjAction_OneofSizer, []interface{}{
		(*ZsgjAction_ZsgjSaveReceipt)(nil),
		(*ZsgjAction_ZsgjSaveProduct)(nil),
		(*ZsgjAction_AssetRegister)(nil),
		(*ZsgjAction_ZsgjApplyRecharge)(nil),
		(*ZsgjAction_ZsgjApplyWithdraw)(nil),
		(*ZsgjAction_ZsgjCash)(nil),
		(*ZsgjAction_ZsgjClear)(nil),
		(*ZsgjAction_ZsgjDelist)(nil),
		(*ZsgjAction_ZsgjCompanyCertification)(nil),
		(*ZsgjAction_ZsgjPersonCertification)(nil),
		(*ZsgjAction_DlReceiptPay)(nil),
		(*ZsgjAction_DlReceiptDelist)(nil),
		(*ZsgjAction_DlBlankNote)(nil),
		(*ZsgjAction_DlReceiptList)(nil),
		(*ZsgjAction_DlBlankNotePay)(nil),
		(*ZsgjAction_DlReceiptAndNoteCash)(nil),
		(*ZsgjAction_DlInvestCash)(nil),
		(*ZsgjAction_DlCredit)(nil),
		(*ZsgjAction_AdAssetRegister)(nil),
		(*ZsgjAction_AdApplyBlankNote)(nil),
		(*ZsgjAction_AdAndNoteCash)(nil),
		(*ZsgjAction_GylFinanceInfo)(nil),
		(*ZsgjAction_GylDirectFinance)(nil),
	}
}

func _ZsgjAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZsgjAction)
	// value
	switch x := m.Value.(type) {
	case *ZsgjAction_ZsgjSaveReceipt:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjSaveReceipt); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjSaveProduct:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjSaveProduct); err != nil {
			return err
		}
	case *ZsgjAction_AssetRegister:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetRegister); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjApplyRecharge:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjApplyRecharge); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjApplyWithdraw:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjApplyWithdraw); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjCash:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjCash); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjClear:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjClear); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjDelist:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjDelist); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjCompanyCertification:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjCompanyCertification); err != nil {
			return err
		}
	case *ZsgjAction_ZsgjPersonCertification:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZsgjPersonCertification); err != nil {
			return err
		}
	case *ZsgjAction_DlReceiptPay:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlReceiptPay); err != nil {
			return err
		}
	case *ZsgjAction_DlReceiptDelist:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlReceiptDelist); err != nil {
			return err
		}
	case *ZsgjAction_DlBlankNote:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlBlankNote); err != nil {
			return err
		}
	case *ZsgjAction_DlReceiptList:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlReceiptList); err != nil {
			return err
		}
	case *ZsgjAction_DlBlankNotePay:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlBlankNotePay); err != nil {
			return err
		}
	case *ZsgjAction_DlReceiptAndNoteCash:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlReceiptAndNoteCash); err != nil {
			return err
		}
	case *ZsgjAction_DlInvestCash:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlInvestCash); err != nil {
			return err
		}
	case *ZsgjAction_DlCredit:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DlCredit); err != nil {
			return err
		}
	case *ZsgjAction_AdAssetRegister:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdAssetRegister); err != nil {
			return err
		}
	case *ZsgjAction_AdApplyBlankNote:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdApplyBlankNote); err != nil {
			return err
		}
	case *ZsgjAction_AdAndNoteCash:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdAndNoteCash); err != nil {
			return err
		}
	case *ZsgjAction_GylFinanceInfo:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GylFinanceInfo); err != nil {
			return err
		}
	case *ZsgjAction_GylDirectFinance:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GylDirectFinance); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZsgjAction.Value has unexpected type %T", x)
	}
	return nil
}

func _ZsgjAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZsgjAction)
	switch tag {
	case 1: // value.zsgjSaveReceipt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjSaveReceipt)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjSaveReceipt{msg}
		return true, err
	case 2: // value.zsgjSaveProduct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjSaveProduct)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjSaveProduct{msg}
		return true, err
	case 3: // value.assetRegister
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AssetRegisterAction)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_AssetRegister{msg}
		return true, err
	case 4: // value.zsgjApplyRecharge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjApplyRecharge)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjApplyRecharge{msg}
		return true, err
	case 5: // value.zsgjApplyWithdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjApplyWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjApplyWithdraw{msg}
		return true, err
	case 6: // value.zsgjCash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjCash)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjCash{msg}
		return true, err
	case 7: // value.zsgjClear
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjClear)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjClear{msg}
		return true, err
	case 8: // value.zsgjDelist
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjDelist)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjDelist{msg}
		return true, err
	case 9: // value.zsgjCompanyCertification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjCompanyCertification)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjCompanyCertification{msg}
		return true, err
	case 10: // value.zsgjPersonCertification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZsgjPersonCertification)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_ZsgjPersonCertification{msg}
		return true, err
	case 11: // value.dlReceiptPay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlReceiptPay)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlReceiptPay{msg}
		return true, err
	case 12: // value.dlReceiptDelist
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlReceiptDelist)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlReceiptDelist{msg}
		return true, err
	case 13: // value.dlBlankNote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlBlankNote)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlBlankNote{msg}
		return true, err
	case 14: // value.dlReceiptList
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlReceiptList)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlReceiptList{msg}
		return true, err
	case 15: // value.dlBlankNotePay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlBlankNotePay)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlBlankNotePay{msg}
		return true, err
	case 16: // value.dlReceiptAndNoteCash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlReceiptAndNoteCash)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlReceiptAndNoteCash{msg}
		return true, err
	case 17: // value.dlInvestCash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlInvestCash)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlInvestCash{msg}
		return true, err
	case 18: // value.dlCredit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DlCredit)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_DlCredit{msg}
		return true, err
	case 19: // value.adAssetRegister
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdAssetRegister)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_AdAssetRegister{msg}
		return true, err
	case 20: // value.adApplyBlankNote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdApplyBlankNote)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_AdApplyBlankNote{msg}
		return true, err
	case 21: // value.adAndNoteCash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdAndNoteCash)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_AdAndNoteCash{msg}
		return true, err
	case 22: // value.gylFinanceInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GylFinanceInfo)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_GylFinanceInfo{msg}
		return true, err
	case 23: // value.gylDirectFinance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GylDirectFinance)
		err := b.DecodeMessage(msg)
		m.Value = &ZsgjAction_GylDirectFinance{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZsgjAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZsgjAction)
	// value
	switch x := m.Value.(type) {
	case *ZsgjAction_ZsgjSaveReceipt:
		s := proto.Size(x.ZsgjSaveReceipt)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjSaveProduct:
		s := proto.Size(x.ZsgjSaveProduct)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_AssetRegister:
		s := proto.Size(x.AssetRegister)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjApplyRecharge:
		s := proto.Size(x.ZsgjApplyRecharge)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjApplyWithdraw:
		s := proto.Size(x.ZsgjApplyWithdraw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjCash:
		s := proto.Size(x.ZsgjCash)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjClear:
		s := proto.Size(x.ZsgjClear)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjDelist:
		s := proto.Size(x.ZsgjDelist)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjCompanyCertification:
		s := proto.Size(x.ZsgjCompanyCertification)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_ZsgjPersonCertification:
		s := proto.Size(x.ZsgjPersonCertification)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlReceiptPay:
		s := proto.Size(x.DlReceiptPay)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlReceiptDelist:
		s := proto.Size(x.DlReceiptDelist)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlBlankNote:
		s := proto.Size(x.DlBlankNote)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlReceiptList:
		s := proto.Size(x.DlReceiptList)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlBlankNotePay:
		s := proto.Size(x.DlBlankNotePay)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlReceiptAndNoteCash:
		s := proto.Size(x.DlReceiptAndNoteCash)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlInvestCash:
		s := proto.Size(x.DlInvestCash)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_DlCredit:
		s := proto.Size(x.DlCredit)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_AdAssetRegister:
		s := proto.Size(x.AdAssetRegister)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_AdApplyBlankNote:
		s := proto.Size(x.AdApplyBlankNote)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_AdAndNoteCash:
		s := proto.Size(x.AdAndNoteCash)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_GylFinanceInfo:
		s := proto.Size(x.GylFinanceInfo)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZsgjAction_GylDirectFinance:
		s := proto.Size(x.GylDirectFinance)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 兑付-
type ZsgjCash struct {
	Id                string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	InvestAgency      *Enterprise   `protobuf:"bytes,2,opt,name=investAgency" json:"investAgency,omitempty"`
	Rate              int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	WaitAmount        int64         `protobuf:"varint,4,opt,name=waitAmount" json:"waitAmount,omitempty"`
	WaitInterest      int64         `protobuf:"varint,5,opt,name=waitInterest" json:"waitInterest,omitempty"`
	DelayWaitInterest int64         `protobuf:"varint,6,opt,name=delayWaitInterest" json:"delayWaitInterest,omitempty"`
	WaitSumAmount     int64         `protobuf:"varint,7,opt,name=waitSumAmount" json:"waitSumAmount,omitempty"`
	Opty              OperationType `protobuf:"varint,8,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany         *Enterprise   `protobuf:"bytes,9,opt,name=opCompany" json:"opCompany,omitempty"`
}

func (m *ZsgjCash) Reset()                    { *m = ZsgjCash{} }
func (m *ZsgjCash) String() string            { return proto.CompactTextString(m) }
func (*ZsgjCash) ProtoMessage()               {}
func (*ZsgjCash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ZsgjCash) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZsgjCash) GetInvestAgency() *Enterprise {
	if m != nil {
		return m.InvestAgency
	}
	return nil
}

func (m *ZsgjCash) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *ZsgjCash) GetWaitAmount() int64 {
	if m != nil {
		return m.WaitAmount
	}
	return 0
}

func (m *ZsgjCash) GetWaitInterest() int64 {
	if m != nil {
		return m.WaitInterest
	}
	return 0
}

func (m *ZsgjCash) GetDelayWaitInterest() int64 {
	if m != nil {
		return m.DelayWaitInterest
	}
	return 0
}

func (m *ZsgjCash) GetWaitSumAmount() int64 {
	if m != nil {
		return m.WaitSumAmount
	}
	return 0
}

func (m *ZsgjCash) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjCash) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

// 清算-
type ZsgjClear struct {
	ProductId      string      `protobuf:"bytes,1,opt,name=productId" json:"productId,omitempty"`
	Name           string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	State          ZsgjState   `protobuf:"varint,4,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	AnnualizedRate int64       `protobuf:"varint,5,opt,name=annualizedRate" json:"annualizedRate,omitempty"`
	IssuedName     *Enterprise `protobuf:"bytes,7,opt,name=issuedName" json:"issuedName,omitempty"`
	CreateTime     int64       `protobuf:"varint,8,opt,name=createTime" json:"createTime,omitempty"`
	Amount         int64       `protobuf:"varint,9,opt,name=amount" json:"amount,omitempty"`
	RaiseStartDate int64       `protobuf:"varint,10,opt,name=raiseStartDate" json:"raiseStartDate,omitempty"`
	RaiseEndDate   int64       `protobuf:"varint,11,opt,name=raiseEndDate" json:"raiseEndDate,omitempty"`
	Duration       int64       `protobuf:"varint,12,opt,name=duration" json:"duration,omitempty"`
}

func (m *ZsgjClear) Reset()                    { *m = ZsgjClear{} }
func (m *ZsgjClear) String() string            { return proto.CompactTextString(m) }
func (*ZsgjClear) ProtoMessage()               {}
func (*ZsgjClear) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ZsgjClear) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ZsgjClear) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZsgjClear) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjClear) GetAnnualizedRate() int64 {
	if m != nil {
		return m.AnnualizedRate
	}
	return 0
}

func (m *ZsgjClear) GetIssuedName() *Enterprise {
	if m != nil {
		return m.IssuedName
	}
	return nil
}

func (m *ZsgjClear) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ZsgjClear) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ZsgjClear) GetRaiseStartDate() int64 {
	if m != nil {
		return m.RaiseStartDate
	}
	return 0
}

func (m *ZsgjClear) GetRaiseEndDate() int64 {
	if m != nil {
		return m.RaiseEndDate
	}
	return 0
}

func (m *ZsgjClear) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// 摘牌-
type ZsgjDelist struct {
	CalInterestStart    int64         `protobuf:"varint,1,opt,name=calInterestStart" json:"calInterestStart,omitempty"`
	CalInterestEnd      int64         `protobuf:"varint,2,opt,name=calInterestEnd" json:"calInterestEnd,omitempty"`
	StartAmount         int64         `protobuf:"varint,3,opt,name=startAmount" json:"startAmount,omitempty"`
	IncreamentingAmount int64         `protobuf:"varint,4,opt,name=increamentingAmount" json:"increamentingAmount,omitempty"`
	SaleTarget          string        `protobuf:"bytes,5,opt,name=saleTarget" json:"saleTarget,omitempty"`
	RiskLevel           string        `protobuf:"bytes,6,opt,name=riskLevel" json:"riskLevel,omitempty"`
	AnnualizedRate      int32         `protobuf:"varint,7,opt,name=annualizedRate" json:"annualizedRate,omitempty"`
	Duration            int64         `protobuf:"varint,8,opt,name=duration" json:"duration,omitempty"`
	Purchaseable        int64         `protobuf:"varint,9,opt,name=purchaseable" json:"purchaseable,omitempty"`
	Purchase            int64         `protobuf:"varint,10,opt,name=purchase" json:"purchase,omitempty"`
	Opty                OperationType `protobuf:"varint,11,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany           *Enterprise   `protobuf:"bytes,12,opt,name=opCompany" json:"opCompany,omitempty"`
	ProductId           string        `protobuf:"bytes,13,opt,name=productId" json:"productId,omitempty"`
}

func (m *ZsgjDelist) Reset()                    { *m = ZsgjDelist{} }
func (m *ZsgjDelist) String() string            { return proto.CompactTextString(m) }
func (*ZsgjDelist) ProtoMessage()               {}
func (*ZsgjDelist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ZsgjDelist) GetCalInterestStart() int64 {
	if m != nil {
		return m.CalInterestStart
	}
	return 0
}

func (m *ZsgjDelist) GetCalInterestEnd() int64 {
	if m != nil {
		return m.CalInterestEnd
	}
	return 0
}

func (m *ZsgjDelist) GetStartAmount() int64 {
	if m != nil {
		return m.StartAmount
	}
	return 0
}

func (m *ZsgjDelist) GetIncreamentingAmount() int64 {
	if m != nil {
		return m.IncreamentingAmount
	}
	return 0
}

func (m *ZsgjDelist) GetSaleTarget() string {
	if m != nil {
		return m.SaleTarget
	}
	return ""
}

func (m *ZsgjDelist) GetRiskLevel() string {
	if m != nil {
		return m.RiskLevel
	}
	return ""
}

func (m *ZsgjDelist) GetAnnualizedRate() int32 {
	if m != nil {
		return m.AnnualizedRate
	}
	return 0
}

func (m *ZsgjDelist) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ZsgjDelist) GetPurchaseable() int64 {
	if m != nil {
		return m.Purchaseable
	}
	return 0
}

func (m *ZsgjDelist) GetPurchase() int64 {
	if m != nil {
		return m.Purchase
	}
	return 0
}

func (m *ZsgjDelist) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjDelist) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *ZsgjDelist) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

// 提款
type ZsgjApplyWithdraw struct {
	Id          string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CompanyName string    `protobuf:"bytes,2,opt,name=companyName" json:"companyName,omitempty"`
	ApplyDate   int64     `protobuf:"varint,3,opt,name=applyDate" json:"applyDate,omitempty"`
	Amount      int64     `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	State       ZsgjState `protobuf:"varint,5,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Name        string    `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Account     string    `protobuf:"bytes,7,opt,name=account" json:"account,omitempty"`
}

func (m *ZsgjApplyWithdraw) Reset()                    { *m = ZsgjApplyWithdraw{} }
func (m *ZsgjApplyWithdraw) String() string            { return proto.CompactTextString(m) }
func (*ZsgjApplyWithdraw) ProtoMessage()               {}
func (*ZsgjApplyWithdraw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ZsgjApplyWithdraw) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZsgjApplyWithdraw) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ZsgjApplyWithdraw) GetApplyDate() int64 {
	if m != nil {
		return m.ApplyDate
	}
	return 0
}

func (m *ZsgjApplyWithdraw) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ZsgjApplyWithdraw) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjApplyWithdraw) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZsgjApplyWithdraw) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// 充值
type ZsgjApplyRecharge struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CompanyName  string `protobuf:"bytes,2,opt,name=companyName" json:"companyName,omitempty"`
	ApplyDate    int64  `protobuf:"varint,3,opt,name=applyDate" json:"applyDate,omitempty"`
	Amount       int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Account      string `protobuf:"bytes,5,opt,name=account" json:"account,omitempty"`
	Name         string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	CompleteDate int64  `protobuf:"varint,7,opt,name=completeDate" json:"completeDate,omitempty"`
}

func (m *ZsgjApplyRecharge) Reset()                    { *m = ZsgjApplyRecharge{} }
func (m *ZsgjApplyRecharge) String() string            { return proto.CompactTextString(m) }
func (*ZsgjApplyRecharge) ProtoMessage()               {}
func (*ZsgjApplyRecharge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ZsgjApplyRecharge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZsgjApplyRecharge) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ZsgjApplyRecharge) GetApplyDate() int64 {
	if m != nil {
		return m.ApplyDate
	}
	return 0
}

func (m *ZsgjApplyRecharge) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ZsgjApplyRecharge) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ZsgjApplyRecharge) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZsgjApplyRecharge) GetCompleteDate() int64 {
	if m != nil {
		return m.CompleteDate
	}
	return 0
}

// 产品申请审核
type ZsgjProductExamine struct {
	Product   *ZsgjProduct `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	ApplyDate int64        `protobuf:"varint,2,opt,name=applyDate" json:"applyDate,omitempty"`
}

func (m *ZsgjProductExamine) Reset()                    { *m = ZsgjProductExamine{} }
func (m *ZsgjProductExamine) String() string            { return proto.CompactTextString(m) }
func (*ZsgjProductExamine) ProtoMessage()               {}
func (*ZsgjProductExamine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ZsgjProductExamine) GetProduct() *ZsgjProduct {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *ZsgjProductExamine) GetApplyDate() int64 {
	if m != nil {
		return m.ApplyDate
	}
	return 0
}

// 个人认证
type ZsgjPersonCertification struct {
	Name            string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IdCard          string    `protobuf:"bytes,2,opt,name=idCard" json:"idCard,omitempty"`
	PhoneNumber     string    `protobuf:"bytes,3,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	CertificateDate int64     `protobuf:"varint,4,opt,name=certificateDate" json:"certificateDate,omitempty"`
	State           ZsgjState `protobuf:"varint,5,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Info            string    `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
}

func (m *ZsgjPersonCertification) Reset()                    { *m = ZsgjPersonCertification{} }
func (m *ZsgjPersonCertification) String() string            { return proto.CompactTextString(m) }
func (*ZsgjPersonCertification) ProtoMessage()               {}
func (*ZsgjPersonCertification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ZsgjPersonCertification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZsgjPersonCertification) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *ZsgjPersonCertification) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *ZsgjPersonCertification) GetCertificateDate() int64 {
	if m != nil {
		return m.CertificateDate
	}
	return 0
}

func (m *ZsgjPersonCertification) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjPersonCertification) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

// 企业认证
type ZsgjCompanyCertification struct {
	Name            string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IdCard          string    `protobuf:"bytes,2,opt,name=idCard" json:"idCard,omitempty"`
	PhoneNumber     string    `protobuf:"bytes,3,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	CertificateDate int64     `protobuf:"varint,4,opt,name=certificateDate" json:"certificateDate,omitempty"`
	Info            string    `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	CompanyName     string    `protobuf:"bytes,6,opt,name=companyName" json:"companyName,omitempty"`
	CompanyAddress  string    `protobuf:"bytes,7,opt,name=companyAddress" json:"companyAddress,omitempty"`
	LicenseNumber   string    `protobuf:"bytes,8,opt,name=licenseNumber" json:"licenseNumber,omitempty"`
	LegalPersonName string    `protobuf:"bytes,9,opt,name=legalPersonName" json:"legalPersonName,omitempty"`
	State           ZsgjState `protobuf:"varint,10,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	PubKey          []byte    `protobuf:"bytes,11,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *ZsgjCompanyCertification) Reset()                    { *m = ZsgjCompanyCertification{} }
func (m *ZsgjCompanyCertification) String() string            { return proto.CompactTextString(m) }
func (*ZsgjCompanyCertification) ProtoMessage()               {}
func (*ZsgjCompanyCertification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ZsgjCompanyCertification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetCertificateDate() int64 {
	if m != nil {
		return m.CertificateDate
	}
	return 0
}

func (m *ZsgjCompanyCertification) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetCompanyAddress() string {
	if m != nil {
		return m.CompanyAddress
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetLicenseNumber() string {
	if m != nil {
		return m.LicenseNumber
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetLegalPersonName() string {
	if m != nil {
		return m.LegalPersonName
	}
	return ""
}

func (m *ZsgjCompanyCertification) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjCompanyCertification) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// 保存单据
type ZsgjSaveReceipt struct {
	ZsgjReceipt *ZsgjReceipt `protobuf:"bytes,1,opt,name=zsgjReceipt" json:"zsgjReceipt,omitempty"`
}

func (m *ZsgjSaveReceipt) Reset()                    { *m = ZsgjSaveReceipt{} }
func (m *ZsgjSaveReceipt) String() string            { return proto.CompactTextString(m) }
func (*ZsgjSaveReceipt) ProtoMessage()               {}
func (*ZsgjSaveReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ZsgjSaveReceipt) GetZsgjReceipt() *ZsgjReceipt {
	if m != nil {
		return m.ZsgjReceipt
	}
	return nil
}

// 保存产品
type ZsgjSaveProduct struct {
	ZsgjProduct *ZsgjProduct `protobuf:"bytes,1,opt,name=zsgjProduct" json:"zsgjProduct,omitempty"`
}

func (m *ZsgjSaveProduct) Reset()                    { *m = ZsgjSaveProduct{} }
func (m *ZsgjSaveProduct) String() string            { return proto.CompactTextString(m) }
func (*ZsgjSaveProduct) ProtoMessage()               {}
func (*ZsgjSaveProduct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ZsgjSaveProduct) GetZsgjProduct() *ZsgjProduct {
	if m != nil {
		return m.ZsgjProduct
	}
	return nil
}

// 资产登记-
type AssetRegisterAction struct {
	RegisterDate   int64         `protobuf:"varint,1,opt,name=registerDate" json:"registerDate,omitempty"`
	PayCompany     *Enterprise   `protobuf:"bytes,2,opt,name=payCompany" json:"payCompany,omitempty"`
	ReceiveCompany *Enterprise   `protobuf:"bytes,3,opt,name=receiveCompany" json:"receiveCompany,omitempty"`
	SumAmount      int64         `protobuf:"varint,4,opt,name=sumAmount" json:"sumAmount,omitempty"`
	StartDate      int64         `protobuf:"varint,5,opt,name=startDate" json:"startDate,omitempty"`
	EndDate        int64         `protobuf:"varint,6,opt,name=endDate" json:"endDate,omitempty"`
	ContractName   string        `protobuf:"bytes,7,opt,name=contractName" json:"contractName,omitempty"`
	ContractNo     string        `protobuf:"bytes,8,opt,name=contractNo" json:"contractNo,omitempty"`
	State          ZsgjState     `protobuf:"varint,9,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty           OperationType `protobuf:"varint,10,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	ReceiptId      string        `protobuf:"bytes,11,opt,name=receiptId" json:"receiptId,omitempty"`
	InvestAgency   *Enterprise   `protobuf:"bytes,12,opt,name=investAgency" json:"investAgency,omitempty"`
	Rate           int64         `protobuf:"varint,13,opt,name=rate" json:"rate,omitempty"`
}

func (m *AssetRegisterAction) Reset()                    { *m = AssetRegisterAction{} }
func (m *AssetRegisterAction) String() string            { return proto.CompactTextString(m) }
func (*AssetRegisterAction) ProtoMessage()               {}
func (*AssetRegisterAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AssetRegisterAction) GetRegisterDate() int64 {
	if m != nil {
		return m.RegisterDate
	}
	return 0
}

func (m *AssetRegisterAction) GetPayCompany() *Enterprise {
	if m != nil {
		return m.PayCompany
	}
	return nil
}

func (m *AssetRegisterAction) GetReceiveCompany() *Enterprise {
	if m != nil {
		return m.ReceiveCompany
	}
	return nil
}

func (m *AssetRegisterAction) GetSumAmount() int64 {
	if m != nil {
		return m.SumAmount
	}
	return 0
}

func (m *AssetRegisterAction) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *AssetRegisterAction) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *AssetRegisterAction) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *AssetRegisterAction) GetContractNo() string {
	if m != nil {
		return m.ContractNo
	}
	return ""
}

func (m *AssetRegisterAction) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *AssetRegisterAction) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *AssetRegisterAction) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *AssetRegisterAction) GetInvestAgency() *Enterprise {
	if m != nil {
		return m.InvestAgency
	}
	return nil
}

func (m *AssetRegisterAction) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// 预付款资产登记-
type AdAssetRegister struct {
	RegisterDate int64         `protobuf:"varint,1,opt,name=registerDate" json:"registerDate,omitempty"`
	CoreCompany  *Enterprise   `protobuf:"bytes,2,opt,name=coreCompany" json:"coreCompany,omitempty"`
	DownCompany  *Enterprise   `protobuf:"bytes,3,opt,name=downCompany" json:"downCompany,omitempty"`
	OrderAmount  int64         `protobuf:"varint,4,opt,name=orderAmount" json:"orderAmount,omitempty"`
	SignDate     int64         `protobuf:"varint,5,opt,name=signDate" json:"signDate,omitempty"`
	EndDate      int64         `protobuf:"varint,6,opt,name=endDate" json:"endDate,omitempty"`
	GoodsNums    int64         `protobuf:"varint,7,opt,name=goodsNums" json:"goodsNums,omitempty"`
	GoodsDate    int64         `protobuf:"varint,8,opt,name=goodsDate" json:"goodsDate,omitempty"`
	GoodsName    string        `protobuf:"bytes,9,opt,name=goodsName" json:"goodsName,omitempty"`
	State        ZsgjState     `protobuf:"varint,10,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty         OperationType `protobuf:"varint,11,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	AdanceId     string        `protobuf:"bytes,12,opt,name=adanceId" json:"adanceId,omitempty"`
	Rate         int64         `protobuf:"varint,13,opt,name=rate" json:"rate,omitempty"`
	OpCompany    *Enterprise   `protobuf:"bytes,14,opt,name=opCompany" json:"opCompany,omitempty"`
}

func (m *AdAssetRegister) Reset()                    { *m = AdAssetRegister{} }
func (m *AdAssetRegister) String() string            { return proto.CompactTextString(m) }
func (*AdAssetRegister) ProtoMessage()               {}
func (*AdAssetRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AdAssetRegister) GetRegisterDate() int64 {
	if m != nil {
		return m.RegisterDate
	}
	return 0
}

func (m *AdAssetRegister) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *AdAssetRegister) GetDownCompany() *Enterprise {
	if m != nil {
		return m.DownCompany
	}
	return nil
}

func (m *AdAssetRegister) GetOrderAmount() int64 {
	if m != nil {
		return m.OrderAmount
	}
	return 0
}

func (m *AdAssetRegister) GetSignDate() int64 {
	if m != nil {
		return m.SignDate
	}
	return 0
}

func (m *AdAssetRegister) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *AdAssetRegister) GetGoodsNums() int64 {
	if m != nil {
		return m.GoodsNums
	}
	return 0
}

func (m *AdAssetRegister) GetGoodsDate() int64 {
	if m != nil {
		return m.GoodsDate
	}
	return 0
}

func (m *AdAssetRegister) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *AdAssetRegister) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *AdAssetRegister) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *AdAssetRegister) GetAdanceId() string {
	if m != nil {
		return m.AdanceId
	}
	return ""
}

func (m *AdAssetRegister) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AdAssetRegister) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

// 预付款申请白条
type AdApplyBlankNote struct {
	CoreCompany    *Enterprise   `protobuf:"bytes,1,opt,name=coreCompany" json:"coreCompany,omitempty"`
	FinanceCompany *Enterprise   `protobuf:"bytes,2,opt,name=financeCompany" json:"financeCompany,omitempty"`
	IsOnline       bool          `protobuf:"varint,3,opt,name=isOnline" json:"isOnline,omitempty"`
	IsBank         bool          `protobuf:"varint,4,opt,name=isBank" json:"isBank,omitempty"`
	Amount         int64         `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	Rate           int64         `protobuf:"varint,6,opt,name=rate" json:"rate,omitempty"`
	EndDate        int64         `protobuf:"varint,7,opt,name=endDate" json:"endDate,omitempty"`
	CashAmount     int64         `protobuf:"varint,8,opt,name=cashAmount" json:"cashAmount,omitempty"`
	BlankId        string        `protobuf:"bytes,9,opt,name=blankId" json:"blankId,omitempty"`
	AdanceId       string        `protobuf:"bytes,10,opt,name=adanceId" json:"adanceId,omitempty"`
	State          ZsgjState     `protobuf:"varint,11,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty           OperationType `protobuf:"varint,12,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany      *Enterprise   `protobuf:"bytes,13,opt,name=opCompany" json:"opCompany,omitempty"`
}

func (m *AdApplyBlankNote) Reset()                    { *m = AdApplyBlankNote{} }
func (m *AdApplyBlankNote) String() string            { return proto.CompactTextString(m) }
func (*AdApplyBlankNote) ProtoMessage()               {}
func (*AdApplyBlankNote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AdApplyBlankNote) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *AdApplyBlankNote) GetFinanceCompany() *Enterprise {
	if m != nil {
		return m.FinanceCompany
	}
	return nil
}

func (m *AdApplyBlankNote) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *AdApplyBlankNote) GetIsBank() bool {
	if m != nil {
		return m.IsBank
	}
	return false
}

func (m *AdApplyBlankNote) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AdApplyBlankNote) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *AdApplyBlankNote) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func (m *AdApplyBlankNote) GetCashAmount() int64 {
	if m != nil {
		return m.CashAmount
	}
	return 0
}

func (m *AdApplyBlankNote) GetBlankId() string {
	if m != nil {
		return m.BlankId
	}
	return ""
}

func (m *AdApplyBlankNote) GetAdanceId() string {
	if m != nil {
		return m.AdanceId
	}
	return ""
}

func (m *AdApplyBlankNote) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *AdApplyBlankNote) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *AdApplyBlankNote) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

// 预付款兑付和白条兑付
type AdAndNoteCash struct {
	OwnerEnterprise *Enterprise   `protobuf:"bytes,1,opt,name=ownerEnterprise" json:"ownerEnterprise,omitempty"`
	CashEnterprise  *Enterprise   `protobuf:"bytes,2,opt,name=cashEnterprise" json:"cashEnterprise,omitempty"`
	AdanceId        string        `protobuf:"bytes,3,opt,name=adanceId" json:"adanceId,omitempty"`
	BlankNoteId     string        `protobuf:"bytes,4,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	IsOverDue       bool          `protobuf:"varint,5,opt,name=isOverDue" json:"isOverDue,omitempty"`
	CashAmount      int64         `protobuf:"varint,6,opt,name=cashAmount" json:"cashAmount,omitempty"`
	State           ZsgjState     `protobuf:"varint,9,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty            OperationType `protobuf:"varint,10,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany       *Enterprise   `protobuf:"bytes,11,opt,name=opCompany" json:"opCompany,omitempty"`
}

func (m *AdAndNoteCash) Reset()                    { *m = AdAndNoteCash{} }
func (m *AdAndNoteCash) String() string            { return proto.CompactTextString(m) }
func (*AdAndNoteCash) ProtoMessage()               {}
func (*AdAndNoteCash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AdAndNoteCash) GetOwnerEnterprise() *Enterprise {
	if m != nil {
		return m.OwnerEnterprise
	}
	return nil
}

func (m *AdAndNoteCash) GetCashEnterprise() *Enterprise {
	if m != nil {
		return m.CashEnterprise
	}
	return nil
}

func (m *AdAndNoteCash) GetAdanceId() string {
	if m != nil {
		return m.AdanceId
	}
	return ""
}

func (m *AdAndNoteCash) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *AdAndNoteCash) GetIsOverDue() bool {
	if m != nil {
		return m.IsOverDue
	}
	return false
}

func (m *AdAndNoteCash) GetCashAmount() int64 {
	if m != nil {
		return m.CashAmount
	}
	return 0
}

func (m *AdAndNoteCash) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *AdAndNoteCash) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *AdAndNoteCash) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

// 单据支付
type DlReceiptPay struct {
	ReceiveCompany   *Enterprise   `protobuf:"bytes,1,opt,name=receiveCompany" json:"receiveCompany,omitempty"`
	Amount           int64         `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Rate             int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	PayAmount        int64         `protobuf:"varint,4,opt,name=payAmount" json:"payAmount,omitempty"`
	Info             string        `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	OpCompany        *Enterprise   `protobuf:"bytes,6,opt,name=opCompany" json:"opCompany,omitempty"`
	State            ZsgjState     `protobuf:"varint,7,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty             OperationType `protobuf:"varint,8,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	ReceiptId        string        `protobuf:"bytes,9,opt,name=receiptId" json:"receiptId,omitempty"`
	ReceiptParentsId string        `protobuf:"bytes,11,opt,name=receiptParentsId" json:"receiptParentsId,omitempty"`
}

func (m *DlReceiptPay) Reset()                    { *m = DlReceiptPay{} }
func (m *DlReceiptPay) String() string            { return proto.CompactTextString(m) }
func (*DlReceiptPay) ProtoMessage()               {}
func (*DlReceiptPay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DlReceiptPay) GetReceiveCompany() *Enterprise {
	if m != nil {
		return m.ReceiveCompany
	}
	return nil
}

func (m *DlReceiptPay) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DlReceiptPay) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *DlReceiptPay) GetPayAmount() int64 {
	if m != nil {
		return m.PayAmount
	}
	return 0
}

func (m *DlReceiptPay) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *DlReceiptPay) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlReceiptPay) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlReceiptPay) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlReceiptPay) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *DlReceiptPay) GetReceiptParentsId() string {
	if m != nil {
		return m.ReceiptParentsId
	}
	return ""
}

// 单据摘牌
type DlReceiptDelist struct {
	TransferAmount   int64         `protobuf:"varint,1,opt,name=transferAmount" json:"transferAmount,omitempty"`
	DelistAmount     int64         `protobuf:"varint,2,opt,name=delistAmount" json:"delistAmount,omitempty"`
	Rate             int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	Discount         int64         `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	PayAmount        int64         `protobuf:"varint,5,opt,name=payAmount" json:"payAmount,omitempty"`
	OpCompany        *Enterprise   `protobuf:"bytes,6,opt,name=opCompany" json:"opCompany,omitempty"`
	UpstreamFirm     *Enterprise   `protobuf:"bytes,7,opt,name=upstreamFirm" json:"upstreamFirm,omitempty"`
	State            ZsgjState     `protobuf:"varint,8,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty             OperationType `protobuf:"varint,9,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	ReceiptId        string        `protobuf:"bytes,10,opt,name=receiptId" json:"receiptId,omitempty"`
	ReceiptParentsId string        `protobuf:"bytes,11,opt,name=receiptParentsId" json:"receiptParentsId,omitempty"`
}

func (m *DlReceiptDelist) Reset()                    { *m = DlReceiptDelist{} }
func (m *DlReceiptDelist) String() string            { return proto.CompactTextString(m) }
func (*DlReceiptDelist) ProtoMessage()               {}
func (*DlReceiptDelist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DlReceiptDelist) GetTransferAmount() int64 {
	if m != nil {
		return m.TransferAmount
	}
	return 0
}

func (m *DlReceiptDelist) GetDelistAmount() int64 {
	if m != nil {
		return m.DelistAmount
	}
	return 0
}

func (m *DlReceiptDelist) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *DlReceiptDelist) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *DlReceiptDelist) GetPayAmount() int64 {
	if m != nil {
		return m.PayAmount
	}
	return 0
}

func (m *DlReceiptDelist) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlReceiptDelist) GetUpstreamFirm() *Enterprise {
	if m != nil {
		return m.UpstreamFirm
	}
	return nil
}

func (m *DlReceiptDelist) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlReceiptDelist) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlReceiptDelist) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *DlReceiptDelist) GetReceiptParentsId() string {
	if m != nil {
		return m.ReceiptParentsId
	}
	return ""
}

// 白条
type DlBlankNote struct {
	CoreCompany        *Enterprise   `protobuf:"bytes,1,opt,name=coreCompany" json:"coreCompany,omitempty"`
	UpstreamFirm       *Enterprise   `protobuf:"bytes,2,opt,name=upstreamFirm" json:"upstreamFirm,omitempty"`
	Amount             int64         `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	CashAgency         *Enterprise   `protobuf:"bytes,4,opt,name=cashAgency" json:"cashAgency,omitempty"`
	CompleteDate       int64         `protobuf:"varint,5,opt,name=completeDate" json:"completeDate,omitempty"`
	CashDate           int64         `protobuf:"varint,6,opt,name=cashDate" json:"cashDate,omitempty"`
	ApplyBlankNote     int64         `protobuf:"varint,7,opt,name=applyBlankNote" json:"applyBlankNote,omitempty"`
	BlankNoteAmount    int64         `protobuf:"varint,8,opt,name=blankNoteAmount" json:"blankNoteAmount,omitempty"`
	OverdueRate        int64         `protobuf:"varint,9,opt,name=overdueRate" json:"overdueRate,omitempty"`
	LeftAmount         int64         `protobuf:"varint,10,opt,name=leftAmount" json:"leftAmount,omitempty"`
	OpCompany          *Enterprise   `protobuf:"bytes,11,opt,name=opCompany" json:"opCompany,omitempty"`
	State              ZsgjState     `protobuf:"varint,12,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty               OperationType `protobuf:"varint,13,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	BlankNoteId        string        `protobuf:"bytes,14,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	ReceiptId          string        `protobuf:"bytes,15,opt,name=receiptId" json:"receiptId,omitempty"`
	ReceiptParentsId   string        `protobuf:"bytes,16,opt,name=receiptParentsId" json:"receiptParentsId,omitempty"`
	BlankNoteParentsId string        `protobuf:"bytes,17,opt,name=blankNoteParentsId" json:"blankNoteParentsId,omitempty"`
}

func (m *DlBlankNote) Reset()                    { *m = DlBlankNote{} }
func (m *DlBlankNote) String() string            { return proto.CompactTextString(m) }
func (*DlBlankNote) ProtoMessage()               {}
func (*DlBlankNote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DlBlankNote) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *DlBlankNote) GetUpstreamFirm() *Enterprise {
	if m != nil {
		return m.UpstreamFirm
	}
	return nil
}

func (m *DlBlankNote) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DlBlankNote) GetCashAgency() *Enterprise {
	if m != nil {
		return m.CashAgency
	}
	return nil
}

func (m *DlBlankNote) GetCompleteDate() int64 {
	if m != nil {
		return m.CompleteDate
	}
	return 0
}

func (m *DlBlankNote) GetCashDate() int64 {
	if m != nil {
		return m.CashDate
	}
	return 0
}

func (m *DlBlankNote) GetApplyBlankNote() int64 {
	if m != nil {
		return m.ApplyBlankNote
	}
	return 0
}

func (m *DlBlankNote) GetBlankNoteAmount() int64 {
	if m != nil {
		return m.BlankNoteAmount
	}
	return 0
}

func (m *DlBlankNote) GetOverdueRate() int64 {
	if m != nil {
		return m.OverdueRate
	}
	return 0
}

func (m *DlBlankNote) GetLeftAmount() int64 {
	if m != nil {
		return m.LeftAmount
	}
	return 0
}

func (m *DlBlankNote) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlBlankNote) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlBlankNote) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlBlankNote) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *DlBlankNote) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *DlBlankNote) GetReceiptParentsId() string {
	if m != nil {
		return m.ReceiptParentsId
	}
	return ""
}

func (m *DlBlankNote) GetBlankNoteParentsId() string {
	if m != nil {
		return m.BlankNoteParentsId
	}
	return ""
}

// 单据挂牌
type DlReceiptList struct {
	ReceiptAmount    int64         `protobuf:"varint,1,opt,name=receiptAmount" json:"receiptAmount,omitempty"`
	TransferAmount   int64         `protobuf:"varint,2,opt,name=transferAmount" json:"transferAmount,omitempty"`
	Rate             int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	Discount         int64         `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	Finance          int64         `protobuf:"varint,5,opt,name=finance" json:"finance,omitempty"`
	ListType         string        `protobuf:"bytes,6,opt,name=listType" json:"listType,omitempty"`
	OpCompany        *Enterprise   `protobuf:"bytes,7,opt,name=opCompany" json:"opCompany,omitempty"`
	State            ZsgjState     `protobuf:"varint,8,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty             OperationType `protobuf:"varint,9,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	ReceiptId        string        `protobuf:"bytes,10,opt,name=receiptId" json:"receiptId,omitempty"`
	ReceiptParentsId string        `protobuf:"bytes,11,opt,name=receiptParentsId" json:"receiptParentsId,omitempty"`
	ListingAmount    int64         `protobuf:"varint,12,opt,name=listingAmount" json:"listingAmount,omitempty"`
}

func (m *DlReceiptList) Reset()                    { *m = DlReceiptList{} }
func (m *DlReceiptList) String() string            { return proto.CompactTextString(m) }
func (*DlReceiptList) ProtoMessage()               {}
func (*DlReceiptList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DlReceiptList) GetReceiptAmount() int64 {
	if m != nil {
		return m.ReceiptAmount
	}
	return 0
}

func (m *DlReceiptList) GetTransferAmount() int64 {
	if m != nil {
		return m.TransferAmount
	}
	return 0
}

func (m *DlReceiptList) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *DlReceiptList) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *DlReceiptList) GetFinance() int64 {
	if m != nil {
		return m.Finance
	}
	return 0
}

func (m *DlReceiptList) GetListType() string {
	if m != nil {
		return m.ListType
	}
	return ""
}

func (m *DlReceiptList) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlReceiptList) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlReceiptList) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlReceiptList) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *DlReceiptList) GetReceiptParentsId() string {
	if m != nil {
		return m.ReceiptParentsId
	}
	return ""
}

func (m *DlReceiptList) GetListingAmount() int64 {
	if m != nil {
		return m.ListingAmount
	}
	return 0
}

// 白条支付
type DlBlankNotePay struct {
	ReceiveCompany     *Enterprise   `protobuf:"bytes,1,opt,name=receiveCompany" json:"receiveCompany,omitempty"`
	Amount             int64         `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Rate               int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	PayAmount          int64         `protobuf:"varint,4,opt,name=payAmount" json:"payAmount,omitempty"`
	Info               string        `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	OpCompany          *Enterprise   `protobuf:"bytes,6,opt,name=opCompany" json:"opCompany,omitempty"`
	State              ZsgjState     `protobuf:"varint,7,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty               OperationType `protobuf:"varint,8,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	BlankNoteId        string        `protobuf:"bytes,9,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	BlankNoteParentsId string        `protobuf:"bytes,10,opt,name=blankNoteParentsId" json:"blankNoteParentsId,omitempty"`
}

func (m *DlBlankNotePay) Reset()                    { *m = DlBlankNotePay{} }
func (m *DlBlankNotePay) String() string            { return proto.CompactTextString(m) }
func (*DlBlankNotePay) ProtoMessage()               {}
func (*DlBlankNotePay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DlBlankNotePay) GetReceiveCompany() *Enterprise {
	if m != nil {
		return m.ReceiveCompany
	}
	return nil
}

func (m *DlBlankNotePay) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DlBlankNotePay) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *DlBlankNotePay) GetPayAmount() int64 {
	if m != nil {
		return m.PayAmount
	}
	return 0
}

func (m *DlBlankNotePay) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *DlBlankNotePay) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlBlankNotePay) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlBlankNotePay) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlBlankNotePay) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *DlBlankNotePay) GetBlankNoteParentsId() string {
	if m != nil {
		return m.BlankNoteParentsId
	}
	return ""
}

// 渠道企业兑付(没用)
type DlInvestCash struct {
	Enterprise    string        `protobuf:"bytes,1,opt,name=enterprise" json:"enterprise,omitempty"`
	Amount        int64         `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	ReceiptType   string        `protobuf:"bytes,3,opt,name=receiptType" json:"receiptType,omitempty"`
	OverdueStatus string        `protobuf:"bytes,4,opt,name=overdueStatus" json:"overdueStatus,omitempty"`
	CashStatus    string        `protobuf:"bytes,5,opt,name=cashStatus" json:"cashStatus,omitempty"`
	CashAmount    int64         `protobuf:"varint,6,opt,name=cashAmount" json:"cashAmount,omitempty"`
	OpCompany     string        `protobuf:"bytes,7,opt,name=opCompany" json:"opCompany,omitempty"`
	State         ZsgjState     `protobuf:"varint,8,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty          OperationType `protobuf:"varint,9,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
}

func (m *DlInvestCash) Reset()                    { *m = DlInvestCash{} }
func (m *DlInvestCash) String() string            { return proto.CompactTextString(m) }
func (*DlInvestCash) ProtoMessage()               {}
func (*DlInvestCash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DlInvestCash) GetEnterprise() string {
	if m != nil {
		return m.Enterprise
	}
	return ""
}

func (m *DlInvestCash) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DlInvestCash) GetReceiptType() string {
	if m != nil {
		return m.ReceiptType
	}
	return ""
}

func (m *DlInvestCash) GetOverdueStatus() string {
	if m != nil {
		return m.OverdueStatus
	}
	return ""
}

func (m *DlInvestCash) GetCashStatus() string {
	if m != nil {
		return m.CashStatus
	}
	return ""
}

func (m *DlInvestCash) GetCashAmount() int64 {
	if m != nil {
		return m.CashAmount
	}
	return 0
}

func (m *DlInvestCash) GetOpCompany() string {
	if m != nil {
		return m.OpCompany
	}
	return ""
}

func (m *DlInvestCash) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlInvestCash) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

// 白条、单据持有兑付
type DlReceiptAndNoteCash struct {
	OwnerEnterprise *Enterprise   `protobuf:"bytes,1,opt,name=ownerEnterprise" json:"ownerEnterprise,omitempty"`
	Amount          int64         `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	CashType        string        `protobuf:"bytes,3,opt,name=cashType" json:"cashType,omitempty"`
	OverdueStatus   int64         `protobuf:"varint,4,opt,name=overdueStatus" json:"overdueStatus,omitempty"`
	CashStatus      string        `protobuf:"bytes,5,opt,name=cashStatus" json:"cashStatus,omitempty"`
	CashAmount      int64         `protobuf:"varint,6,opt,name=cashAmount" json:"cashAmount,omitempty"`
	CashTarget      string        `protobuf:"bytes,7,opt,name=cashTarget" json:"cashTarget,omitempty"`
	OpCompany       *Enterprise   `protobuf:"bytes,8,opt,name=opCompany" json:"opCompany,omitempty"`
	OverdueRate     int64         `protobuf:"varint,9,opt,name=overdueRate" json:"overdueRate,omitempty"`
	State           ZsgjState     `protobuf:"varint,10,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty            OperationType `protobuf:"varint,11,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	BlankNoteId     string        `protobuf:"bytes,12,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	ReceiptId       string        `protobuf:"bytes,13,opt,name=receiptId" json:"receiptId,omitempty"`
}

func (m *DlReceiptAndNoteCash) Reset()                    { *m = DlReceiptAndNoteCash{} }
func (m *DlReceiptAndNoteCash) String() string            { return proto.CompactTextString(m) }
func (*DlReceiptAndNoteCash) ProtoMessage()               {}
func (*DlReceiptAndNoteCash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DlReceiptAndNoteCash) GetOwnerEnterprise() *Enterprise {
	if m != nil {
		return m.OwnerEnterprise
	}
	return nil
}

func (m *DlReceiptAndNoteCash) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DlReceiptAndNoteCash) GetCashType() string {
	if m != nil {
		return m.CashType
	}
	return ""
}

func (m *DlReceiptAndNoteCash) GetOverdueStatus() int64 {
	if m != nil {
		return m.OverdueStatus
	}
	return 0
}

func (m *DlReceiptAndNoteCash) GetCashStatus() string {
	if m != nil {
		return m.CashStatus
	}
	return ""
}

func (m *DlReceiptAndNoteCash) GetCashAmount() int64 {
	if m != nil {
		return m.CashAmount
	}
	return 0
}

func (m *DlReceiptAndNoteCash) GetCashTarget() string {
	if m != nil {
		return m.CashTarget
	}
	return ""
}

func (m *DlReceiptAndNoteCash) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *DlReceiptAndNoteCash) GetOverdueRate() int64 {
	if m != nil {
		return m.OverdueRate
	}
	return 0
}

func (m *DlReceiptAndNoteCash) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlReceiptAndNoteCash) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlReceiptAndNoteCash) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *DlReceiptAndNoteCash) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

type DlCredit struct {
	CoreCompany  *Enterprise   `protobuf:"bytes,1,opt,name=coreCompany" json:"coreCompany,omitempty"`
	CreditAmount int64         `protobuf:"varint,2,opt,name=creditAmount" json:"creditAmount,omitempty"`
	OtherAmount  int64         `protobuf:"varint,3,opt,name=otherAmount" json:"otherAmount,omitempty"`
	Using        int64         `protobuf:"varint,4,opt,name=using" json:"using,omitempty"`
	Remaining    int64         `protobuf:"varint,5,opt,name=remaining" json:"remaining,omitempty"`
	OldAmount    int64         `protobuf:"varint,6,opt,name=oldAmount" json:"oldAmount,omitempty"`
	State        ZsgjState     `protobuf:"varint,7,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty         OperationType `protobuf:"varint,8,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany    *Enterprise   `protobuf:"bytes,9,opt,name=opCompany" json:"opCompany,omitempty"`
}

func (m *DlCredit) Reset()                    { *m = DlCredit{} }
func (m *DlCredit) String() string            { return proto.CompactTextString(m) }
func (*DlCredit) ProtoMessage()               {}
func (*DlCredit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DlCredit) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *DlCredit) GetCreditAmount() int64 {
	if m != nil {
		return m.CreditAmount
	}
	return 0
}

func (m *DlCredit) GetOtherAmount() int64 {
	if m != nil {
		return m.OtherAmount
	}
	return 0
}

func (m *DlCredit) GetUsing() int64 {
	if m != nil {
		return m.Using
	}
	return 0
}

func (m *DlCredit) GetRemaining() int64 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *DlCredit) GetOldAmount() int64 {
	if m != nil {
		return m.OldAmount
	}
	return 0
}

func (m *DlCredit) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *DlCredit) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *DlCredit) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

// 申请融资
type GylFinanceInfo struct {
	OpCompany    *Enterprise   `protobuf:"bytes,1,opt,name=opCompany" json:"opCompany,omitempty"`
	PartnerPic   []string      `protobuf:"bytes,2,rep,name=partnerPic" json:"partnerPic,omitempty"`
	HouseholdPic []string      `protobuf:"bytes,3,rep,name=householdPic" json:"householdPic,omitempty"`
	TaxPic       []string      `protobuf:"bytes,4,rep,name=taxPic" json:"taxPic,omitempty"`
	MarriagePic  []string      `protobuf:"bytes,5,rep,name=marriagePic" json:"marriagePic,omitempty"`
	ContractPic  []string      `protobuf:"bytes,6,rep,name=contractPic" json:"contractPic,omitempty"`
	ArticlePic   []string      `protobuf:"bytes,7,rep,name=articlePic" json:"articlePic,omitempty"`
	State        ZsgjState     `protobuf:"varint,8,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty         OperationType `protobuf:"varint,9,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
}

func (m *GylFinanceInfo) Reset()                    { *m = GylFinanceInfo{} }
func (m *GylFinanceInfo) String() string            { return proto.CompactTextString(m) }
func (*GylFinanceInfo) ProtoMessage()               {}
func (*GylFinanceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GylFinanceInfo) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *GylFinanceInfo) GetPartnerPic() []string {
	if m != nil {
		return m.PartnerPic
	}
	return nil
}

func (m *GylFinanceInfo) GetHouseholdPic() []string {
	if m != nil {
		return m.HouseholdPic
	}
	return nil
}

func (m *GylFinanceInfo) GetTaxPic() []string {
	if m != nil {
		return m.TaxPic
	}
	return nil
}

func (m *GylFinanceInfo) GetMarriagePic() []string {
	if m != nil {
		return m.MarriagePic
	}
	return nil
}

func (m *GylFinanceInfo) GetContractPic() []string {
	if m != nil {
		return m.ContractPic
	}
	return nil
}

func (m *GylFinanceInfo) GetArticlePic() []string {
	if m != nil {
		return m.ArticlePic
	}
	return nil
}

func (m *GylFinanceInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *GylFinanceInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

// 定向融资
type GylDirectFinance struct {
	ReceiptAmount    int64         `protobuf:"varint,1,opt,name=receiptAmount" json:"receiptAmount,omitempty"`
	TransferAmount   int64         `protobuf:"varint,2,opt,name=transferAmount" json:"transferAmount,omitempty"`
	Rate             int64         `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	Discount         int64         `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	Finance          int64         `protobuf:"varint,5,opt,name=finance" json:"finance,omitempty"`
	FinanceCompany   *Enterprise   `protobuf:"bytes,6,opt,name=financeCompany" json:"financeCompany,omitempty"`
	UpstreamCompany  *Enterprise   `protobuf:"bytes,7,opt,name=upstreamCompany" json:"upstreamCompany,omitempty"`
	OpCompany        *Enterprise   `protobuf:"bytes,8,opt,name=opCompany" json:"opCompany,omitempty"`
	State            ZsgjState     `protobuf:"varint,9,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty             OperationType `protobuf:"varint,10,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	ReceiptId        string        `protobuf:"bytes,11,opt,name=receiptId" json:"receiptId,omitempty"`
	ReceiptParentsId string        `protobuf:"bytes,12,opt,name=receiptParentsId" json:"receiptParentsId,omitempty"`
}

func (m *GylDirectFinance) Reset()                    { *m = GylDirectFinance{} }
func (m *GylDirectFinance) String() string            { return proto.CompactTextString(m) }
func (*GylDirectFinance) ProtoMessage()               {}
func (*GylDirectFinance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GylDirectFinance) GetReceiptAmount() int64 {
	if m != nil {
		return m.ReceiptAmount
	}
	return 0
}

func (m *GylDirectFinance) GetTransferAmount() int64 {
	if m != nil {
		return m.TransferAmount
	}
	return 0
}

func (m *GylDirectFinance) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *GylDirectFinance) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *GylDirectFinance) GetFinance() int64 {
	if m != nil {
		return m.Finance
	}
	return 0
}

func (m *GylDirectFinance) GetFinanceCompany() *Enterprise {
	if m != nil {
		return m.FinanceCompany
	}
	return nil
}

func (m *GylDirectFinance) GetUpstreamCompany() *Enterprise {
	if m != nil {
		return m.UpstreamCompany
	}
	return nil
}

func (m *GylDirectFinance) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *GylDirectFinance) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *GylDirectFinance) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *GylDirectFinance) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *GylDirectFinance) GetReceiptParentsId() string {
	if m != nil {
		return m.ReceiptParentsId
	}
	return ""
}

type Enterprise struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RoleId string `protobuf:"bytes,2,opt,name=roleId" json:"roleId,omitempty"`
}

func (m *Enterprise) Reset()                    { *m = Enterprise{} }
func (m *Enterprise) String() string            { return proto.CompactTextString(m) }
func (*Enterprise) ProtoMessage()               {}
func (*Enterprise) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Enterprise) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Enterprise) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

// 产品摘牌信息
type DelistInfo struct {
	Amount int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *DelistInfo) Reset()                    { *m = DelistInfo{} }
func (m *DelistInfo) String() string            { return proto.CompactTextString(m) }
func (*DelistInfo) ProtoMessage()               {}
func (*DelistInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DelistInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DelistInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Delist struct {
	Info []*DelistInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *Delist) Reset()                    { *m = Delist{} }
func (m *Delist) String() string            { return proto.CompactTextString(m) }
func (*Delist) ProtoMessage()               {}
func (*Delist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Delist) GetInfo() []*DelistInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type RmbAssets struct {
	Rmb      int64 `protobuf:"varint,1,opt,name=rmb" json:"rmb,omitempty"`
	Cashed   int64 `protobuf:"varint,2,opt,name=cashed" json:"cashed,omitempty"`
	WaitCash int64 `protobuf:"varint,3,opt,name=waitCash" json:"waitCash,omitempty"`
	Invest   int64 `protobuf:"varint,4,opt,name=invest" json:"invest,omitempty"`
	Income   int64 `protobuf:"varint,5,opt,name=income" json:"income,omitempty"`
}

func (m *RmbAssets) Reset()                    { *m = RmbAssets{} }
func (m *RmbAssets) String() string            { return proto.CompactTextString(m) }
func (*RmbAssets) ProtoMessage()               {}
func (*RmbAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RmbAssets) GetRmb() int64 {
	if m != nil {
		return m.Rmb
	}
	return 0
}

func (m *RmbAssets) GetCashed() int64 {
	if m != nil {
		return m.Cashed
	}
	return 0
}

func (m *RmbAssets) GetWaitCash() int64 {
	if m != nil {
		return m.WaitCash
	}
	return 0
}

func (m *RmbAssets) GetInvest() int64 {
	if m != nil {
		return m.Invest
	}
	return 0
}

func (m *RmbAssets) GetIncome() int64 {
	if m != nil {
		return m.Income
	}
	return 0
}

type ReceiptAssets struct {
	Receipt   int64 `protobuf:"varint,1,opt,name=receipt" json:"receipt,omitempty"`
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Financing int64 `protobuf:"varint,3,opt,name=financing" json:"financing,omitempty"`
	Payments  int64 `protobuf:"varint,4,opt,name=payments" json:"payments,omitempty"`
}

func (m *ReceiptAssets) Reset()                    { *m = ReceiptAssets{} }
func (m *ReceiptAssets) String() string            { return proto.CompactTextString(m) }
func (*ReceiptAssets) ProtoMessage()               {}
func (*ReceiptAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ReceiptAssets) GetReceipt() int64 {
	if m != nil {
		return m.Receipt
	}
	return 0
}

func (m *ReceiptAssets) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *ReceiptAssets) GetFinancing() int64 {
	if m != nil {
		return m.Financing
	}
	return 0
}

func (m *ReceiptAssets) GetPayments() int64 {
	if m != nil {
		return m.Payments
	}
	return 0
}

type ProductAssets struct {
	Product   int64 `protobuf:"varint,1,opt,name=product" json:"product,omitempty"`
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Financing int64 `protobuf:"varint,3,opt,name=financing" json:"financing,omitempty"`
}

func (m *ProductAssets) Reset()                    { *m = ProductAssets{} }
func (m *ProductAssets) String() string            { return proto.CompactTextString(m) }
func (*ProductAssets) ProtoMessage()               {}
func (*ProductAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ProductAssets) GetProduct() int64 {
	if m != nil {
		return m.Product
	}
	return 0
}

func (m *ProductAssets) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *ProductAssets) GetFinancing() int64 {
	if m != nil {
		return m.Financing
	}
	return 0
}

type BlankNoteAssets struct {
	BlankNote int64 `protobuf:"varint,1,opt,name=blankNote" json:"blankNote,omitempty"`
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Payments  int64 `protobuf:"varint,3,opt,name=payments" json:"payments,omitempty"`
}

func (m *BlankNoteAssets) Reset()                    { *m = BlankNoteAssets{} }
func (m *BlankNoteAssets) String() string            { return proto.CompactTextString(m) }
func (*BlankNoteAssets) ProtoMessage()               {}
func (*BlankNoteAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *BlankNoteAssets) GetBlankNote() int64 {
	if m != nil {
		return m.BlankNote
	}
	return 0
}

func (m *BlankNoteAssets) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *BlankNoteAssets) GetPayments() int64 {
	if m != nil {
		return m.Payments
	}
	return 0
}

type AdanceAssets struct {
	Receipt   int64 `protobuf:"varint,1,opt,name=receipt" json:"receipt,omitempty"`
	Available int64 `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
	Financing int64 `protobuf:"varint,3,opt,name=financing" json:"financing,omitempty"`
	Payments  int64 `protobuf:"varint,4,opt,name=payments" json:"payments,omitempty"`
}

func (m *AdanceAssets) Reset()                    { *m = AdanceAssets{} }
func (m *AdanceAssets) String() string            { return proto.CompactTextString(m) }
func (*AdanceAssets) ProtoMessage()               {}
func (*AdanceAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *AdanceAssets) GetReceipt() int64 {
	if m != nil {
		return m.Receipt
	}
	return 0
}

func (m *AdanceAssets) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *AdanceAssets) GetFinancing() int64 {
	if m != nil {
		return m.Financing
	}
	return 0
}

func (m *AdanceAssets) GetPayments() int64 {
	if m != nil {
		return m.Payments
	}
	return 0
}

type ZsgjReceiptInfo struct {
	ReceiptId      string        `protobuf:"bytes,1,opt,name=receiptId" json:"receiptId,omitempty"`
	CoreCompany    *Enterprise   `protobuf:"bytes,2,opt,name=coreCompany" json:"coreCompany,omitempty"`
	ReceiveCompany *Enterprise   `protobuf:"bytes,3,opt,name=receiveCompany" json:"receiveCompany,omitempty"`
	SumAmount      int64         `protobuf:"varint,4,opt,name=sumAmount" json:"sumAmount,omitempty"`
	IssuedAgency   *Enterprise   `protobuf:"bytes,5,opt,name=issuedAgency" json:"issuedAgency,omitempty"`
	State          ZsgjState     `protobuf:"varint,6,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	ReceiptViceId  string        `protobuf:"bytes,7,opt,name=receiptViceId" json:"receiptViceId,omitempty"`
	FinanceAmount  int64         `protobuf:"varint,8,opt,name=financeAmount" json:"financeAmount,omitempty"`
	Opty           OperationType `protobuf:"varint,9,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	InvestAgency   *Enterprise   `protobuf:"bytes,10,opt,name=investAgency" json:"investAgency,omitempty"`
	Owner          *Enterprise   `protobuf:"bytes,11,opt,name=owner" json:"owner,omitempty"`
	TransferAmount int64         `protobuf:"varint,12,opt,name=transferAmount" json:"transferAmount,omitempty"`
	Payed          int64         `protobuf:"varint,13,opt,name=payed" json:"payed,omitempty"`
}

func (m *ZsgjReceiptInfo) Reset()                    { *m = ZsgjReceiptInfo{} }
func (m *ZsgjReceiptInfo) String() string            { return proto.CompactTextString(m) }
func (*ZsgjReceiptInfo) ProtoMessage()               {}
func (*ZsgjReceiptInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ZsgjReceiptInfo) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *ZsgjReceiptInfo) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *ZsgjReceiptInfo) GetReceiveCompany() *Enterprise {
	if m != nil {
		return m.ReceiveCompany
	}
	return nil
}

func (m *ZsgjReceiptInfo) GetSumAmount() int64 {
	if m != nil {
		return m.SumAmount
	}
	return 0
}

func (m *ZsgjReceiptInfo) GetIssuedAgency() *Enterprise {
	if m != nil {
		return m.IssuedAgency
	}
	return nil
}

func (m *ZsgjReceiptInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjReceiptInfo) GetReceiptViceId() string {
	if m != nil {
		return m.ReceiptViceId
	}
	return ""
}

func (m *ZsgjReceiptInfo) GetFinanceAmount() int64 {
	if m != nil {
		return m.FinanceAmount
	}
	return 0
}

func (m *ZsgjReceiptInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjReceiptInfo) GetInvestAgency() *Enterprise {
	if m != nil {
		return m.InvestAgency
	}
	return nil
}

func (m *ZsgjReceiptInfo) GetOwner() *Enterprise {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ZsgjReceiptInfo) GetTransferAmount() int64 {
	if m != nil {
		return m.TransferAmount
	}
	return 0
}

func (m *ZsgjReceiptInfo) GetPayed() int64 {
	if m != nil {
		return m.Payed
	}
	return 0
}

type ZsgjProductInfo struct {
	ProductId                   string        `protobuf:"bytes,1,opt,name=productId" json:"productId,omitempty"`
	ProductName                 string        `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty"`
	AnnualizedRate              int32         `protobuf:"varint,4,opt,name=annualizedRate" json:"annualizedRate,omitempty"`
	IssuedAgency                *Enterprise   `protobuf:"bytes,5,opt,name=issuedAgency" json:"issuedAgency,omitempty"`
	Frequency                   string        `protobuf:"bytes,6,opt,name=frequency" json:"frequency,omitempty"`
	PayInterestMethod           string        `protobuf:"bytes,7,opt,name=payInterestMethod" json:"payInterestMethod,omitempty"`
	CalInterestMethod           string        `protobuf:"bytes,8,opt,name=calInterestMethod" json:"calInterestMethod,omitempty"`
	CoinType                    string        `protobuf:"bytes,9,opt,name=coinType" json:"coinType,omitempty"`
	GuaranteeAgency             *Enterprise   `protobuf:"bytes,10,opt,name=guaranteeAgency" json:"guaranteeAgency,omitempty"`
	HostingAgency               *Enterprise   `protobuf:"bytes,11,opt,name=hostingAgency" json:"hostingAgency,omitempty"`
	IssueScale                  int64         `protobuf:"varint,12,opt,name=issueScale" json:"issueScale,omitempty"`
	SaleTarget                  string        `protobuf:"bytes,13,opt,name=saleTarget" json:"saleTarget,omitempty"`
	RiskLevel                   string        `protobuf:"bytes,14,opt,name=riskLevel" json:"riskLevel,omitempty"`
	RaiseStartDate              int64         `protobuf:"varint,15,opt,name=raiseStartDate" json:"raiseStartDate,omitempty"`
	RaiseEndDate                int64         `protobuf:"varint,16,opt,name=raiseEndDate" json:"raiseEndDate,omitempty"`
	CalInterestStart            int64         `protobuf:"varint,17,opt,name=calInterestStart" json:"calInterestStart,omitempty"`
	CalInterestEnd              int64         `protobuf:"varint,18,opt,name=calInterestEnd" json:"calInterestEnd,omitempty"`
	StartAmount                 int64         `protobuf:"varint,20,opt,name=startAmount" json:"startAmount,omitempty"`
	IncreamentingAmount         int64         `protobuf:"varint,21,opt,name=increamentingAmount" json:"increamentingAmount,omitempty"`
	SubscriptionPerson          int64         `protobuf:"varint,22,opt,name=subscriptionPerson" json:"subscriptionPerson,omitempty"`
	IsTranferable               bool          `protobuf:"varint,23,opt,name=isTranferable" json:"isTranferable,omitempty"`
	Info                        string        `protobuf:"bytes,24,opt,name=info" json:"info,omitempty"`
	TransferStart               int64         `protobuf:"varint,25,opt,name=transferStart" json:"transferStart,omitempty"`
	TransferEnd                 int64         `protobuf:"varint,26,opt,name=transferEnd" json:"transferEnd,omitempty"`
	MinHoldingDuration          int64         `protobuf:"varint,27,opt,name=minHoldingDuration" json:"minHoldingDuration,omitempty"`
	IstransferRateFloat         bool          `protobuf:"varint,28,opt,name=istransferRateFloat" json:"istransferRateFloat,omitempty"`
	MinTransferAmount           int64         `protobuf:"varint,29,opt,name=minTransferAmount" json:"minTransferAmount,omitempty"`
	RateFloatInterregional      string        `protobuf:"bytes,30,opt,name=rateFloatInterregional" json:"rateFloatInterregional,omitempty"`
	TransferIncreamentingAmount int64         `protobuf:"varint,31,opt,name=transferIncreamentingAmount" json:"transferIncreamentingAmount,omitempty"`
	TransferFeeTarget           string        `protobuf:"bytes,32,opt,name=transferFeeTarget" json:"transferFeeTarget,omitempty"`
	State                       ZsgjState     `protobuf:"varint,33,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty                        OperationType `protobuf:"varint,34,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	OpCompany                   *Enterprise   `protobuf:"bytes,35,opt,name=opCompany" json:"opCompany,omitempty"`
	ReceiptId                   string        `protobuf:"bytes,36,opt,name=receiptId" json:"receiptId,omitempty"`
	Owner                       *Enterprise   `protobuf:"bytes,37,opt,name=owner" json:"owner,omitempty"`
	Delisted                    int64         `protobuf:"varint,38,opt,name=delisted" json:"delisted,omitempty"`
	Cashed                      int64         `protobuf:"varint,39,opt,name=cashed" json:"cashed,omitempty"`
}

func (m *ZsgjProductInfo) Reset()                    { *m = ZsgjProductInfo{} }
func (m *ZsgjProductInfo) String() string            { return proto.CompactTextString(m) }
func (*ZsgjProductInfo) ProtoMessage()               {}
func (*ZsgjProductInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ZsgjProductInfo) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ZsgjProductInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ZsgjProductInfo) GetAnnualizedRate() int32 {
	if m != nil {
		return m.AnnualizedRate
	}
	return 0
}

func (m *ZsgjProductInfo) GetIssuedAgency() *Enterprise {
	if m != nil {
		return m.IssuedAgency
	}
	return nil
}

func (m *ZsgjProductInfo) GetFrequency() string {
	if m != nil {
		return m.Frequency
	}
	return ""
}

func (m *ZsgjProductInfo) GetPayInterestMethod() string {
	if m != nil {
		return m.PayInterestMethod
	}
	return ""
}

func (m *ZsgjProductInfo) GetCalInterestMethod() string {
	if m != nil {
		return m.CalInterestMethod
	}
	return ""
}

func (m *ZsgjProductInfo) GetCoinType() string {
	if m != nil {
		return m.CoinType
	}
	return ""
}

func (m *ZsgjProductInfo) GetGuaranteeAgency() *Enterprise {
	if m != nil {
		return m.GuaranteeAgency
	}
	return nil
}

func (m *ZsgjProductInfo) GetHostingAgency() *Enterprise {
	if m != nil {
		return m.HostingAgency
	}
	return nil
}

func (m *ZsgjProductInfo) GetIssueScale() int64 {
	if m != nil {
		return m.IssueScale
	}
	return 0
}

func (m *ZsgjProductInfo) GetSaleTarget() string {
	if m != nil {
		return m.SaleTarget
	}
	return ""
}

func (m *ZsgjProductInfo) GetRiskLevel() string {
	if m != nil {
		return m.RiskLevel
	}
	return ""
}

func (m *ZsgjProductInfo) GetRaiseStartDate() int64 {
	if m != nil {
		return m.RaiseStartDate
	}
	return 0
}

func (m *ZsgjProductInfo) GetRaiseEndDate() int64 {
	if m != nil {
		return m.RaiseEndDate
	}
	return 0
}

func (m *ZsgjProductInfo) GetCalInterestStart() int64 {
	if m != nil {
		return m.CalInterestStart
	}
	return 0
}

func (m *ZsgjProductInfo) GetCalInterestEnd() int64 {
	if m != nil {
		return m.CalInterestEnd
	}
	return 0
}

func (m *ZsgjProductInfo) GetStartAmount() int64 {
	if m != nil {
		return m.StartAmount
	}
	return 0
}

func (m *ZsgjProductInfo) GetIncreamentingAmount() int64 {
	if m != nil {
		return m.IncreamentingAmount
	}
	return 0
}

func (m *ZsgjProductInfo) GetSubscriptionPerson() int64 {
	if m != nil {
		return m.SubscriptionPerson
	}
	return 0
}

func (m *ZsgjProductInfo) GetIsTranferable() bool {
	if m != nil {
		return m.IsTranferable
	}
	return false
}

func (m *ZsgjProductInfo) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ZsgjProductInfo) GetTransferStart() int64 {
	if m != nil {
		return m.TransferStart
	}
	return 0
}

func (m *ZsgjProductInfo) GetTransferEnd() int64 {
	if m != nil {
		return m.TransferEnd
	}
	return 0
}

func (m *ZsgjProductInfo) GetMinHoldingDuration() int64 {
	if m != nil {
		return m.MinHoldingDuration
	}
	return 0
}

func (m *ZsgjProductInfo) GetIstransferRateFloat() bool {
	if m != nil {
		return m.IstransferRateFloat
	}
	return false
}

func (m *ZsgjProductInfo) GetMinTransferAmount() int64 {
	if m != nil {
		return m.MinTransferAmount
	}
	return 0
}

func (m *ZsgjProductInfo) GetRateFloatInterregional() string {
	if m != nil {
		return m.RateFloatInterregional
	}
	return ""
}

func (m *ZsgjProductInfo) GetTransferIncreamentingAmount() int64 {
	if m != nil {
		return m.TransferIncreamentingAmount
	}
	return 0
}

func (m *ZsgjProductInfo) GetTransferFeeTarget() string {
	if m != nil {
		return m.TransferFeeTarget
	}
	return ""
}

func (m *ZsgjProductInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjProductInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjProductInfo) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *ZsgjProductInfo) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *ZsgjProductInfo) GetOwner() *Enterprise {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ZsgjProductInfo) GetDelisted() int64 {
	if m != nil {
		return m.Delisted
	}
	return 0
}

func (m *ZsgjProductInfo) GetCashed() int64 {
	if m != nil {
		return m.Cashed
	}
	return 0
}

type ZsgjBlankNoteInfo struct {
	CoreCompany        *Enterprise   `protobuf:"bytes,1,opt,name=coreCompany" json:"coreCompany,omitempty"`
	UpstreamFirm       *Enterprise   `protobuf:"bytes,2,opt,name=upstreamFirm" json:"upstreamFirm,omitempty"`
	Amount             int64         `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	CashAgency         *Enterprise   `protobuf:"bytes,4,opt,name=cashAgency" json:"cashAgency,omitempty"`
	CompleteDate       int64         `protobuf:"varint,5,opt,name=completeDate" json:"completeDate,omitempty"`
	CashDate           int64         `protobuf:"varint,6,opt,name=cashDate" json:"cashDate,omitempty"`
	ApplyBlankNote     int64         `protobuf:"varint,7,opt,name=applyBlankNote" json:"applyBlankNote,omitempty"`
	BlankNoteAmount    int64         `protobuf:"varint,8,opt,name=blankNoteAmount" json:"blankNoteAmount,omitempty"`
	OverdueRate        int64         `protobuf:"varint,9,opt,name=overdueRate" json:"overdueRate,omitempty"`
	LeftAmount         int64         `protobuf:"varint,10,opt,name=leftAmount" json:"leftAmount,omitempty"`
	OpCompany          *Enterprise   `protobuf:"bytes,11,opt,name=opCompany" json:"opCompany,omitempty"`
	State              ZsgjState     `protobuf:"varint,12,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty               OperationType `protobuf:"varint,13,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	BlankNoteId        string        `protobuf:"bytes,14,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	ReceiptId          string        `protobuf:"bytes,15,opt,name=receiptId" json:"receiptId,omitempty"`
	Owner              *Enterprise   `protobuf:"bytes,16,opt,name=owner" json:"owner,omitempty"`
	BlankNoteParentsId string        `protobuf:"bytes,17,opt,name=blankNoteParentsId" json:"blankNoteParentsId,omitempty"`
	Payed              int64         `protobuf:"varint,18,opt,name=payed" json:"payed,omitempty"`
}

func (m *ZsgjBlankNoteInfo) Reset()                    { *m = ZsgjBlankNoteInfo{} }
func (m *ZsgjBlankNoteInfo) String() string            { return proto.CompactTextString(m) }
func (*ZsgjBlankNoteInfo) ProtoMessage()               {}
func (*ZsgjBlankNoteInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ZsgjBlankNoteInfo) GetCoreCompany() *Enterprise {
	if m != nil {
		return m.CoreCompany
	}
	return nil
}

func (m *ZsgjBlankNoteInfo) GetUpstreamFirm() *Enterprise {
	if m != nil {
		return m.UpstreamFirm
	}
	return nil
}

func (m *ZsgjBlankNoteInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetCashAgency() *Enterprise {
	if m != nil {
		return m.CashAgency
	}
	return nil
}

func (m *ZsgjBlankNoteInfo) GetCompleteDate() int64 {
	if m != nil {
		return m.CompleteDate
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetCashDate() int64 {
	if m != nil {
		return m.CashDate
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetApplyBlankNote() int64 {
	if m != nil {
		return m.ApplyBlankNote
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetBlankNoteAmount() int64 {
	if m != nil {
		return m.BlankNoteAmount
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetOverdueRate() int64 {
	if m != nil {
		return m.OverdueRate
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetLeftAmount() int64 {
	if m != nil {
		return m.LeftAmount
	}
	return 0
}

func (m *ZsgjBlankNoteInfo) GetOpCompany() *Enterprise {
	if m != nil {
		return m.OpCompany
	}
	return nil
}

func (m *ZsgjBlankNoteInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *ZsgjBlankNoteInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *ZsgjBlankNoteInfo) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *ZsgjBlankNoteInfo) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *ZsgjBlankNoteInfo) GetOwner() *Enterprise {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ZsgjBlankNoteInfo) GetBlankNoteParentsId() string {
	if m != nil {
		return m.BlankNoteParentsId
	}
	return ""
}

func (m *ZsgjBlankNoteInfo) GetPayed() int64 {
	if m != nil {
		return m.Payed
	}
	return 0
}

type BlankNoteInfo struct {
	Amount      int64         `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	CashAgency  *Enterprise   `protobuf:"bytes,2,opt,name=cashAgency" json:"cashAgency,omitempty"`
	CashDate    int64         `protobuf:"varint,3,opt,name=cashDate" json:"cashDate,omitempty"`
	Rate        int64         `protobuf:"varint,4,opt,name=rate" json:"rate,omitempty"`
	OverdueRate int64         `protobuf:"varint,5,opt,name=overdueRate" json:"overdueRate,omitempty"`
	State       ZsgjState     `protobuf:"varint,6,opt,name=state,enum=types.ZsgjState" json:"state,omitempty"`
	Opty        OperationType `protobuf:"varint,7,opt,name=opty,enum=types.OperationType" json:"opty,omitempty"`
	BlankNoteId string        `protobuf:"bytes,8,opt,name=blankNoteId" json:"blankNoteId,omitempty"`
	ReceiptId   string        `protobuf:"bytes,9,opt,name=receiptId" json:"receiptId,omitempty"`
	Owner       *Enterprise   `protobuf:"bytes,10,opt,name=owner" json:"owner,omitempty"`
	Payed       int64         `protobuf:"varint,11,opt,name=payed" json:"payed,omitempty"`
}

func (m *BlankNoteInfo) Reset()                    { *m = BlankNoteInfo{} }
func (m *BlankNoteInfo) String() string            { return proto.CompactTextString(m) }
func (*BlankNoteInfo) ProtoMessage()               {}
func (*BlankNoteInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *BlankNoteInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BlankNoteInfo) GetCashAgency() *Enterprise {
	if m != nil {
		return m.CashAgency
	}
	return nil
}

func (m *BlankNoteInfo) GetCashDate() int64 {
	if m != nil {
		return m.CashDate
	}
	return 0
}

func (m *BlankNoteInfo) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *BlankNoteInfo) GetOverdueRate() int64 {
	if m != nil {
		return m.OverdueRate
	}
	return 0
}

func (m *BlankNoteInfo) GetState() ZsgjState {
	if m != nil {
		return m.State
	}
	return ZsgjState_UNKNOW
}

func (m *BlankNoteInfo) GetOpty() OperationType {
	if m != nil {
		return m.Opty
	}
	return OperationType_UNKNOW_OP
}

func (m *BlankNoteInfo) GetBlankNoteId() string {
	if m != nil {
		return m.BlankNoteId
	}
	return ""
}

func (m *BlankNoteInfo) GetReceiptId() string {
	if m != nil {
		return m.ReceiptId
	}
	return ""
}

func (m *BlankNoteInfo) GetOwner() *Enterprise {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *BlankNoteInfo) GetPayed() int64 {
	if m != nil {
		return m.Payed
	}
	return 0
}

type ResultReceipt struct {
	Receipt *ZsgjReceipt `protobuf:"bytes,1,opt,name=receipt" json:"receipt,omitempty"`
}

func (m *ResultReceipt) Reset()                    { *m = ResultReceipt{} }
func (m *ResultReceipt) String() string            { return proto.CompactTextString(m) }
func (*ResultReceipt) ProtoMessage()               {}
func (*ResultReceipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ResultReceipt) GetReceipt() *ZsgjReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type ResultProduct struct {
	Product *ZsgjProduct `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *ResultProduct) Reset()                    { *m = ResultProduct{} }
func (m *ResultProduct) String() string            { return proto.CompactTextString(m) }
func (*ResultProduct) ProtoMessage()               {}
func (*ResultProduct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ResultProduct) GetProduct() *ZsgjProduct {
	if m != nil {
		return m.Product
	}
	return nil
}

type ResultAssetRegister struct {
	Asset *AssetRegisterAction `protobuf:"bytes,1,opt,name=asset" json:"asset,omitempty"`
}

func (m *ResultAssetRegister) Reset()                    { *m = ResultAssetRegister{} }
func (m *ResultAssetRegister) String() string            { return proto.CompactTextString(m) }
func (*ResultAssetRegister) ProtoMessage()               {}
func (*ResultAssetRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ResultAssetRegister) GetAsset() *AssetRegisterAction {
	if m != nil {
		return m.Asset
	}
	return nil
}

type ResultWithdraw struct {
	Withdraw *ZsgjApplyWithdraw `protobuf:"bytes,1,opt,name=withdraw" json:"withdraw,omitempty"`
}

func (m *ResultWithdraw) Reset()                    { *m = ResultWithdraw{} }
func (m *ResultWithdraw) String() string            { return proto.CompactTextString(m) }
func (*ResultWithdraw) ProtoMessage()               {}
func (*ResultWithdraw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ResultWithdraw) GetWithdraw() *ZsgjApplyWithdraw {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

type ResultRecharge struct {
	Recharge *ZsgjApplyRecharge `protobuf:"bytes,1,opt,name=recharge" json:"recharge,omitempty"`
}

func (m *ResultRecharge) Reset()                    { *m = ResultRecharge{} }
func (m *ResultRecharge) String() string            { return proto.CompactTextString(m) }
func (*ResultRecharge) ProtoMessage()               {}
func (*ResultRecharge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ResultRecharge) GetRecharge() *ZsgjApplyRecharge {
	if m != nil {
		return m.Recharge
	}
	return nil
}

type ResultPsnCertification struct {
	PsnCertification *ZsgjPersonCertification `protobuf:"bytes,1,opt,name=psnCertification" json:"psnCertification,omitempty"`
}

func (m *ResultPsnCertification) Reset()                    { *m = ResultPsnCertification{} }
func (m *ResultPsnCertification) String() string            { return proto.CompactTextString(m) }
func (*ResultPsnCertification) ProtoMessage()               {}
func (*ResultPsnCertification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ResultPsnCertification) GetPsnCertification() *ZsgjPersonCertification {
	if m != nil {
		return m.PsnCertification
	}
	return nil
}

type ResultCpyCertification struct {
	CpyCertification *ZsgjCompanyCertification `protobuf:"bytes,1,opt,name=cpyCertification" json:"cpyCertification,omitempty"`
}

func (m *ResultCpyCertification) Reset()                    { *m = ResultCpyCertification{} }
func (m *ResultCpyCertification) String() string            { return proto.CompactTextString(m) }
func (*ResultCpyCertification) ProtoMessage()               {}
func (*ResultCpyCertification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ResultCpyCertification) GetCpyCertification() *ZsgjCompanyCertification {
	if m != nil {
		return m.CpyCertification
	}
	return nil
}

type ResultCash struct {
	Cash *ZsgjCash `protobuf:"bytes,1,opt,name=cash" json:"cash,omitempty"`
}

func (m *ResultCash) Reset()                    { *m = ResultCash{} }
func (m *ResultCash) String() string            { return proto.CompactTextString(m) }
func (*ResultCash) ProtoMessage()               {}
func (*ResultCash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ResultCash) GetCash() *ZsgjCash {
	if m != nil {
		return m.Cash
	}
	return nil
}

type ResultClear struct {
	Clear *ZsgjClear `protobuf:"bytes,1,opt,name=clear" json:"clear,omitempty"`
}

func (m *ResultClear) Reset()                    { *m = ResultClear{} }
func (m *ResultClear) String() string            { return proto.CompactTextString(m) }
func (*ResultClear) ProtoMessage()               {}
func (*ResultClear) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ResultClear) GetClear() *ZsgjClear {
	if m != nil {
		return m.Clear
	}
	return nil
}

type ResultDelist struct {
	Delist *ZsgjDelist `protobuf:"bytes,1,opt,name=delist" json:"delist,omitempty"`
}

func (m *ResultDelist) Reset()                    { *m = ResultDelist{} }
func (m *ResultDelist) String() string            { return proto.CompactTextString(m) }
func (*ResultDelist) ProtoMessage()               {}
func (*ResultDelist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ResultDelist) GetDelist() *ZsgjDelist {
	if m != nil {
		return m.Delist
	}
	return nil
}

func init() {
	proto.RegisterType((*AdanceInfo)(nil), "types.AdanceInfo")
	proto.RegisterType((*ZsgjReceipt)(nil), "types.ZsgjReceipt")
	proto.RegisterType((*ZsgjProduct)(nil), "types.ZsgjProduct")
	proto.RegisterType((*ZsgjAccount)(nil), "types.ZsgjAccount")
	proto.RegisterType((*ZsgjRoleAccount)(nil), "types.ZsgjRoleAccount")
	proto.RegisterType((*AllAccount)(nil), "types.AllAccount")
	proto.RegisterType((*ZsgjAction)(nil), "types.ZsgjAction")
	proto.RegisterType((*ZsgjCash)(nil), "types.ZsgjCash")
	proto.RegisterType((*ZsgjClear)(nil), "types.ZsgjClear")
	proto.RegisterType((*ZsgjDelist)(nil), "types.ZsgjDelist")
	proto.RegisterType((*ZsgjApplyWithdraw)(nil), "types.ZsgjApplyWithdraw")
	proto.RegisterType((*ZsgjApplyRecharge)(nil), "types.ZsgjApplyRecharge")
	proto.RegisterType((*ZsgjProductExamine)(nil), "types.ZsgjProductExamine")
	proto.RegisterType((*ZsgjPersonCertification)(nil), "types.ZsgjPersonCertification")
	proto.RegisterType((*ZsgjCompanyCertification)(nil), "types.ZsgjCompanyCertification")
	proto.RegisterType((*ZsgjSaveReceipt)(nil), "types.ZsgjSaveReceipt")
	proto.RegisterType((*ZsgjSaveProduct)(nil), "types.ZsgjSaveProduct")
	proto.RegisterType((*AssetRegisterAction)(nil), "types.AssetRegisterAction")
	proto.RegisterType((*AdAssetRegister)(nil), "types.AdAssetRegister")
	proto.RegisterType((*AdApplyBlankNote)(nil), "types.AdApplyBlankNote")
	proto.RegisterType((*AdAndNoteCash)(nil), "types.AdAndNoteCash")
	proto.RegisterType((*DlReceiptPay)(nil), "types.DlReceiptPay")
	proto.RegisterType((*DlReceiptDelist)(nil), "types.DlReceiptDelist")
	proto.RegisterType((*DlBlankNote)(nil), "types.DlBlankNote")
	proto.RegisterType((*DlReceiptList)(nil), "types.DlReceiptList")
	proto.RegisterType((*DlBlankNotePay)(nil), "types.DlBlankNotePay")
	proto.RegisterType((*DlInvestCash)(nil), "types.DlInvestCash")
	proto.RegisterType((*DlReceiptAndNoteCash)(nil), "types.DlReceiptAndNoteCash")
	proto.RegisterType((*DlCredit)(nil), "types.DlCredit")
	proto.RegisterType((*GylFinanceInfo)(nil), "types.GylFinanceInfo")
	proto.RegisterType((*GylDirectFinance)(nil), "types.GylDirectFinance")
	proto.RegisterType((*Enterprise)(nil), "types.Enterprise")
	proto.RegisterType((*DelistInfo)(nil), "types.DelistInfo")
	proto.RegisterType((*Delist)(nil), "types.Delist")
	proto.RegisterType((*RmbAssets)(nil), "types.RmbAssets")
	proto.RegisterType((*ReceiptAssets)(nil), "types.ReceiptAssets")
	proto.RegisterType((*ProductAssets)(nil), "types.ProductAssets")
	proto.RegisterType((*BlankNoteAssets)(nil), "types.BlankNoteAssets")
	proto.RegisterType((*AdanceAssets)(nil), "types.AdanceAssets")
	proto.RegisterType((*ZsgjReceiptInfo)(nil), "types.ZsgjReceiptInfo")
	proto.RegisterType((*ZsgjProductInfo)(nil), "types.ZsgjProductInfo")
	proto.RegisterType((*ZsgjBlankNoteInfo)(nil), "types.zsgjBlankNoteInfo")
	proto.RegisterType((*BlankNoteInfo)(nil), "types.blankNoteInfo")
	proto.RegisterType((*ResultReceipt)(nil), "types.ResultReceipt")
	proto.RegisterType((*ResultProduct)(nil), "types.ResultProduct")
	proto.RegisterType((*ResultAssetRegister)(nil), "types.ResultAssetRegister")
	proto.RegisterType((*ResultWithdraw)(nil), "types.ResultWithdraw")
	proto.RegisterType((*ResultRecharge)(nil), "types.ResultRecharge")
	proto.RegisterType((*ResultPsnCertification)(nil), "types.ResultPsnCertification")
	proto.RegisterType((*ResultCpyCertification)(nil), "types.ResultCpyCertification")
	proto.RegisterType((*ResultCash)(nil), "types.ResultCash")
	proto.RegisterType((*ResultClear)(nil), "types.ResultClear")
	proto.RegisterType((*ResultDelist)(nil), "types.ResultDelist")
	proto.RegisterEnum("types.ZsgjState", ZsgjState_name, ZsgjState_value)
	proto.RegisterEnum("types.OperationType", OperationType_name, OperationType_value)
}

func init() { proto.RegisterFile("gyl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x4b, 0x73, 0x1b, 0x47,
	0x7a, 0x04, 0x40, 0x80, 0x40, 0x03, 0x24, 0x87, 0x2d, 0x89, 0x82, 0x25, 0x59, 0xa2, 0x61, 0x5b,
	0xd6, 0x6a, 0x6d, 0xd9, 0x92, 0x2d, 0xbf, 0x1d, 0x7b, 0x08, 0x0c, 0x09, 0x58, 0x10, 0x00, 0x0f,
	0x00, 0xc9, 0x76, 0xb2, 0xc1, 0x8e, 0x80, 0x11, 0x39, 0x6b, 0x10, 0xc0, 0xce, 0x80, 0xd2, 0xd2,
	0xa7, 0x4d, 0x55, 0x2a, 0xff, 0x20, 0x97, 0xfc, 0x89, 0xe4, 0x94, 0xbd, 0xe5, 0x92, 0x5c, 0x53,
	0x95, 0x54, 0x2a, 0x55, 0xa9, 0x9c, 0x92, 0x5f, 0xb0, 0x55, 0xa9, 0x54, 0x0e, 0xa9, 0x24, 0x95,
	0xfa, 0xbe, 0x7e, 0x4c, 0xf7, 0x60, 0x40, 0x80, 0x5a, 0x7b, 0xed, 0x83, 0x6e, 0xec, 0xef, 0xd5,
	0xdd, 0xdf, 0xbb, 0xbb, 0x07, 0x24, 0xb9, 0x83, 0x93, 0xe1, 0xad, 0x89, 0x3f, 0x9e, 0x8e, 0x69,
	0x7a, 0x7a, 0x32, 0x71, 0x83, 0xd2, 0xbf, 0xa7, 0x08, 0x31, 0x07, 0xce, 0xa8, 0xef, 0xd6, 0x46,
	0x8f, 0xc7, 0xf4, 0x12, 0xc9, 0x3a, 0x6c, 0x34, 0x28, 0x26, 0x76, 0x12, 0x37, 0x72, 0xb6, 0x1c,
	0xd3, 0xb7, 0x49, 0xbe, 0x3f, 0xf6, 0xdd, 0xf2, 0xf8, 0x68, 0xe2, 0x8c, 0x4e, 0x8a, 0xc9, 0x9d,
	0xc4, 0x8d, 0xfc, 0x9d, 0xad, 0x5b, 0x28, 0xe7, 0x96, 0x35, 0x9a, 0xba, 0xfe, 0xc4, 0xf7, 0x02,
	0xd7, 0x56, 0xa9, 0x80, 0x69, 0x30, 0x7e, 0x3a, 0x12, 0x4c, 0xa9, 0xb9, 0x4c, 0x0a, 0x15, 0xdd,
	0x21, 0xf9, 0xb1, 0x3f, 0x70, 0x7d, 0xf3, 0x68, 0x7c, 0x3c, 0x9a, 0x16, 0x57, 0x77, 0x12, 0x37,
	0x52, 0xb6, 0x0a, 0x82, 0x75, 0x06, 0xde, 0xc1, 0xa8, 0xe2, 0x4c, 0xdd, 0x62, 0x1a, 0xd1, 0x72,
	0x4c, 0x8b, 0x64, 0xcd, 0x1d, 0x0d, 0x10, 0x95, 0x41, 0x94, 0x18, 0xd2, 0x2b, 0x24, 0x77, 0x30,
	0x1e, 0x0f, 0x82, 0xc6, 0xf1, 0x51, 0x50, 0x5c, 0x43, 0x5c, 0x08, 0x90, 0x58, 0xe4, 0xcc, 0x2a,
	0x58, 0x9d, 0xd7, 0x39, 0x72, 0x8b, 0x39, 0x54, 0x4d, 0x08, 0xa0, 0xd7, 0x49, 0x3a, 0x98, 0x02,
	0x1f, 0xd9, 0x49, 0xdc, 0xd8, 0xb8, 0x63, 0xf0, 0x0d, 0x7e, 0x1d, 0x1c, 0xfc, 0xa2, 0x0d, 0x70,
	0x9b, 0xa1, 0xe9, 0x0d, 0xb2, 0x3a, 0x9e, 0x4c, 0x4f, 0x8a, 0x79, 0x24, 0x3b, 0xcf, 0xc9, 0x9a,
	0x13, 0xd7, 0x77, 0xa6, 0xde, 0x78, 0xd4, 0x39, 0x99, 0xb8, 0x36, 0x52, 0x50, 0x4a, 0x56, 0x7d,
	0x10, 0x58, 0xc0, 0x85, 0xe0, 0xdf, 0xf4, 0x2e, 0x29, 0x8c, 0x9f, 0x8e, 0x5c, 0x5f, 0x68, 0x73,
	0x7d, 0x9e, 0x36, 0x35, 0xb2, 0xd2, 0x7f, 0xaf, 0x92, 0x3c, 0xac, 0xc4, 0x76, 0xfb, 0xae, 0x37,
	0x99, 0xd2, 0x12, 0x29, 0xf8, 0xee, 0x81, 0x17, 0x4c, 0x5d, 0x1f, 0xf7, 0x9a, 0xc0, 0x29, 0x34,
	0xd8, 0xb3, 0x19, 0xfb, 0x03, 0xb2, 0xe1, 0xc3, 0x1c, 0x4f, 0xdc, 0x85, 0xf6, 0x8e, 0x10, 0x82,
	0x7a, 0x83, 0xe3, 0x23, 0xcd, 0xe0, 0x21, 0x00, 0xb1, 0x53, 0xc7, 0x9f, 0x2a, 0xf6, 0x0e, 0x01,
	0xa7, 0x18, 0xfc, 0x2e, 0x29, 0x78, 0x41, 0x70, 0xec, 0x0e, 0xcc, 0x03, 0x77, 0xd4, 0x3f, 0x41,
	0x9b, 0xc7, 0x2b, 0x4c, 0x25, 0x0b, 0xad, 0x99, 0x3d, 0xdd, 0x9a, 0x94, 0xac, 0x7a, 0xa3, 0xc7,
	0x63, 0xee, 0x0e, 0xf8, 0xb7, 0xb4, 0x30, 0x59, 0x68, 0xe1, 0x37, 0x49, 0x6e, 0x3c, 0x11, 0x8a,
	0xca, 0xcf, 0x5b, 0x59, 0x48, 0x03, 0x5a, 0xf0, 0x99, 0x09, 0x6b, 0x03, 0xf4, 0x8b, 0x9c, 0x1d,
	0x02, 0x70, 0xaf, 0xa3, 0x27, 0x6e, 0x30, 0xe5, 0x7b, 0x9d, 0xef, 0x1c, 0x2a, 0x99, 0xf4, 0xb3,
	0x0d, 0xc5, 0xcf, 0x5e, 0x21, 0xeb, 0x5c, 0xee, 0x03, 0x0f, 0x53, 0xc1, 0x26, 0x4e, 0xa6, 0x03,
	0x81, 0xea, 0xb1, 0x37, 0x82, 0xe4, 0xc0, 0xcd, 0x66, 0xa0, 0x08, 0x1d, 0x58, 0xfa, 0xf3, 0x3c,
	0x73, 0xbe, 0x96, 0x3f, 0x1e, 0x1c, 0xf7, 0xd1, 0x94, 0x13, 0xf6, 0xa7, 0x4c, 0x31, 0x21, 0x00,
	0x22, 0x9f, 0x0f, 0x30, 0xce, 0x92, 0x88, 0x57, 0x41, 0xf4, 0x3a, 0xd9, 0x70, 0x46, 0xa3, 0x63,
	0x67, 0xe8, 0x7d, 0xeb, 0x0e, 0x6c, 0x58, 0x39, 0x78, 0x4b, 0xda, 0x8e, 0x40, 0x67, 0x4c, 0x9f,
	0x5e, 0xce, 0xf4, 0x57, 0x48, 0xee, 0xb1, 0xef, 0xfe, 0xf2, 0x18, 0x79, 0x32, 0x6c, 0x79, 0x12,
	0x40, 0x5f, 0x27, 0x5b, 0x13, 0xe7, 0xa4, 0x06, 0xcc, 0x6e, 0x30, 0xbd, 0xef, 0x4e, 0x0f, 0xc7,
	0x03, 0x74, 0xaa, 0x9c, 0x3d, 0x8b, 0x00, 0xea, 0xbe, 0x33, 0x8c, 0x50, 0x67, 0x19, 0xf5, 0x0c,
	0x02, 0x52, 0x5a, 0x7f, 0xec, 0xa1, 0x83, 0x70, 0x87, 0x92, 0x63, 0xfa, 0x11, 0xd9, 0x3c, 0x38,
	0x76, 0x7c, 0x67, 0x34, 0x75, 0x5d, 0xbe, 0x1f, 0x32, 0x6f, 0x3f, 0x51, 0x4a, 0xfa, 0x1e, 0x59,
	0x3f, 0x1c, 0x07, 0x53, 0x6f, 0x74, 0xc0, 0x59, 0xe7, 0xfa, 0x9a, 0x4e, 0x47, 0xaf, 0x12, 0x82,
	0xba, 0x69, 0xf7, 0x9d, 0xa1, 0x48, 0x44, 0x0a, 0x04, 0xf0, 0x81, 0x33, 0x74, 0x3b, 0x8e, 0x7f,
	0xe0, 0x4e, 0xd1, 0xdf, 0x72, 0xb6, 0x02, 0x41, 0x7f, 0xf5, 0x82, 0x6f, 0xea, 0xee, 0x13, 0x77,
	0x88, 0xfe, 0x05, 0xfe, 0x2a, 0x00, 0x60, 0x48, 0xdf, 0xf1, 0x02, 0xb7, 0x2d, 0x03, 0x7b, 0x13,
	0x67, 0x88, 0x40, 0x31, 0x5b, 0x01, 0xc4, 0xe2, 0x21, 0x6e, 0xf0, 0x6c, 0xa5, 0xc0, 0xe8, 0x4d,
	0x62, 0x28, 0x0a, 0x45, 0xde, 0xe2, 0x16, 0xd2, 0xcd, 0xc0, 0x61, 0x5e, 0x05, 0x66, 0x8d, 0x06,
	0x45, 0xca, 0xe6, 0xd5, 0xa1, 0xe0, 0x8a, 0x98, 0x62, 0xb8, 0x73, 0x9f, 0x67, 0x45, 0x48, 0x01,
	0xd1, 0xb7, 0xc8, 0x39, 0x6f, 0xd4, 0xf7, 0x5d, 0xe7, 0xc8, 0x1d, 0xa1, 0xda, 0x18, 0xe5, 0x05,
	0xa4, 0x8c, 0x43, 0xd1, 0x5b, 0x84, 0x06, 0xc7, 0x8f, 0x82, 0xbe, 0xef, 0x4d, 0x20, 0x19, 0xb4,
	0x5c, 0x3f, 0x18, 0x8f, 0x8a, 0xdb, 0xc8, 0x10, 0x83, 0x81, 0x10, 0xf3, 0x82, 0x8e, 0xef, 0x8c,
	0x1e, 0xbb, 0xbe, 0xf3, 0x68, 0xe8, 0x16, 0x2f, 0xee, 0x24, 0x6e, 0x64, 0x6d, 0x1d, 0x28, 0xd3,
	0x50, 0x51, 0x49, 0x43, 0xaf, 0x90, 0xf5, 0xa9, 0xef, 0x8c, 0x82, 0xc7, 0xae, 0xcf, 0xd4, 0xf1,
	0x02, 0x0b, 0x4e, 0x0d, 0x08, 0x7b, 0x14, 0x00, 0x50, 0xc4, 0x25, 0xb6, 0x47, 0x05, 0x04, 0x2b,
	0x3e, 0xf2, 0x46, 0xd5, 0xf1, 0x70, 0xe0, 0x8d, 0x0e, 0x2a, 0xc7, 0x2c, 0x89, 0x15, 0x2f, 0xb3,
	0x15, 0xcf, 0x62, 0x50, 0x27, 0x81, 0x10, 0x00, 0x81, 0xb8, 0x37, 0x1c, 0x3b, 0xd3, 0xe2, 0x15,
	0x5c, 0x77, 0x1c, 0x0a, 0xa2, 0xe4, 0xc8, 0x1b, 0x75, 0x38, 0x9c, 0xeb, 0xf0, 0x45, 0x9c, 0x60,
	0x16, 0x41, 0xdf, 0x25, 0xdb, 0xbe, 0x60, 0x45, 0x6b, 0x41, 0xd5, 0x1a, 0x8f, 0x9c, 0x61, 0xf1,
	0x2a, 0xee, 0x7e, 0x0e, 0x96, 0x7e, 0x46, 0x2e, 0x8b, 0xa9, 0x6b, 0x31, 0x36, 0xbb, 0x86, 0xf3,
	0x9d, 0x46, 0x02, 0xeb, 0x14, 0xe8, 0x3d, 0x57, 0x38, 0xfd, 0x0e, 0x8b, 0xe6, 0x19, 0x44, 0x58,
	0x42, 0x5e, 0x5a, 0xae, 0x21, 0x28, 0x9d, 0xad, 0x5c, 0xbc, 0x7c, 0xd6, 0x72, 0xf1, 0x4a, 0xa4,
	0x5c, 0x94, 0xda, 0x2c, 0x2d, 0x9b, 0xfd, 0x3e, 0xee, 0x6e, 0x07, 0xea, 0x3d, 0xf2, 0x61, 0xe2,
	0x65, 0x89, 0x59, 0x05, 0xd1, 0x12, 0x49, 0xf9, 0x47, 0x8f, 0x78, 0x27, 0x20, 0xf6, 0x63, 0x1f,
	0x3d, 0x32, 0x83, 0xc0, 0x9d, 0x06, 0x36, 0x20, 0x4b, 0xbf, 0x49, 0x92, 0x4d, 0xec, 0x34, 0xc6,
	0x43, 0x57, 0x48, 0xbe, 0x4d, 0x88, 0x2b, 0xd7, 0x87, 0x82, 0x63, 0x17, 0xae, 0x10, 0xd1, 0x0f,
	0x65, 0xfd, 0x61, 0xc2, 0xf9, 0xa4, 0x42, 0x3b, 0xb6, 0x8a, 0xb3, 0x75, 0x52, 0xe0, 0xe5, 0xe5,
	0x82, 0xf3, 0xa6, 0x34, 0xde, 0x96, 0x8a, 0xb3, 0x75, 0x52, 0xfa, 0x19, 0xd9, 0x7c, 0x34, 0x74,
	0x46, 0xdf, 0x34, 0xc6, 0x53, 0x97, 0x73, 0xaf, 0x22, 0xf7, 0x36, 0xe7, 0xde, 0xd5, 0xb1, 0x76,
	0x94, 0x9c, 0xbe, 0x47, 0x0a, 0xac, 0x5f, 0xe6, 0xec, 0xac, 0xea, 0x9c, 0xe3, 0xec, 0xa6, 0x82,
	0xb2, 0x35, 0xc2, 0xd2, 0x94, 0x10, 0x73, 0x38, 0x14, 0x3a, 0x7b, 0x9d, 0xac, 0x39, 0xec, 0x4f,
	0xae, 0x30, 0xaa, 0xf8, 0x0f, 0x27, 0xb2, 0x05, 0x09, 0x7d, 0x9f, 0xe4, 0xfd, 0x50, 0xe1, 0xc5,
	0xe4, 0x4e, 0x4a, 0x59, 0x72, 0xc4, 0x1c, 0xb6, 0x4a, 0x5a, 0xfa, 0x8b, 0x02, 0x21, 0x4c, 0x24,
	0x06, 0xef, 0x2e, 0xd9, 0xfc, 0x16, 0x1c, 0xd4, 0x79, 0xe2, 0x72, 0x1d, 0xf3, 0xe9, 0x55, 0x61,
	0x0a, 0xb6, 0xba, 0x62, 0x47, 0x19, 0x54, 0x19, 0x5c, 0xd7, 0xdc, 0x7a, 0x51, 0x19, 0x1c, 0xab,
	0xca, 0x10, 0x3d, 0xc2, 0x2e, 0x59, 0x77, 0x40, 0x2d, 0x36, 0xef, 0x48, 0xb9, 0x0d, 0x2f, 0x09,
	0x35, 0xaa, 0x38, 0xb6, 0xf4, 0xea, 0x8a, 0xad, 0xb3, 0xd0, 0x2a, 0xd9, 0x02, 0xb1, 0xe6, 0x64,
	0x32, 0x3c, 0xb1, 0xdd, 0xfe, 0x21, 0x84, 0x25, 0xb7, 0x66, 0x51, 0x55, 0xa6, 0x8a, 0xaf, 0xae,
	0xd8, 0xb3, 0x4c, 0x9a, 0xa4, 0x87, 0xde, 0xf4, 0x70, 0xe0, 0x3b, 0x4f, 0xb9, 0x61, 0x67, 0x24,
	0x09, 0xbc, 0x26, 0x49, 0x00, 0xe9, 0x1b, 0x24, 0x0b, 0xc0, 0xb2, 0x13, 0x1c, 0x62, 0x6f, 0x91,
	0xbf, 0xb3, 0xa9, 0x08, 0x00, 0x70, 0x75, 0xc5, 0x96, 0x24, 0xf4, 0x2d, 0x92, 0xc3, 0xbf, 0x87,
	0xae, 0xe3, 0xf3, 0xd6, 0x55, 0xcd, 0x23, 0x08, 0xaf, 0xae, 0xd8, 0x21, 0x11, 0x7d, 0x9b, 0x10,
	0x18, 0x54, 0xdc, 0xa1, 0x17, 0x4c, 0xb1, 0xd5, 0x08, 0x63, 0xed, 0x6b, 0x89, 0xa8, 0xae, 0xd8,
	0x0a, 0x19, 0xfd, 0x19, 0x29, 0xa2, 0x04, 0x16, 0xeb, 0x65, 0xd7, 0x9f, 0x7a, 0x8f, 0xbd, 0x3e,
	0x4b, 0xf4, 0x39, 0x14, 0x71, 0x4d, 0x9d, 0x35, 0x86, 0xac, 0xba, 0x62, 0xcf, 0x15, 0x41, 0xbf,
	0x26, 0x17, 0x01, 0xc7, 0x2a, 0x9a, 0x2e, 0x9d, 0xf5, 0x30, 0x57, 0x15, 0xe9, 0x31, 0x54, 0xd5,
	0x15, 0x7b, 0x9e, 0x00, 0xfa, 0x01, 0x29, 0x0c, 0x86, 0xdc, 0xf3, 0x5a, 0x8e, 0xe8, 0x6c, 0x44,
	0xb8, 0x55, 0x14, 0x54, 0x75, 0xc5, 0xd6, 0x48, 0xc1, 0x4f, 0xe5, 0x98, 0xeb, 0xab, 0xa0, 0xf9,
	0x69, 0x45, 0xc7, 0x82, 0x9f, 0x46, 0x18, 0xe8, 0xbb, 0x24, 0x3f, 0x18, 0xca, 0x9c, 0xc0, 0x3b,
	0x6e, 0x2a, 0xf9, 0x25, 0xa6, 0xba, 0x62, 0xab, 0x84, 0xf4, 0x63, 0xb2, 0x2e, 0x45, 0xd5, 0x61,
	0xe6, 0x0d, 0x2d, 0x47, 0x55, 0x54, 0x1c, 0x78, 0xb6, 0x46, 0x4c, 0x3f, 0x25, 0x1b, 0x8a, 0x30,
	0xd8, 0xf6, 0x26, 0xb2, 0x5f, 0x98, 0x9d, 0x98, 0x6d, 0x3c, 0x42, 0x4e, 0xbf, 0x20, 0xe7, 0xa5,
	0x44, 0x73, 0x34, 0x00, 0x30, 0xba, 0xa4, 0x81, 0x62, 0x2e, 0x47, 0x57, 0xa1, 0x90, 0x54, 0x57,
	0xec, 0x58, 0x56, 0x66, 0x88, 0x1a, 0x9e, 0x2b, 0x50, 0xd4, 0x56, 0xc4, 0x10, 0x21, 0x8a, 0x19,
	0x22, 0x1c, 0x43, 0x50, 0x0c, 0x86, 0x65, 0xdf, 0x1d, 0x78, 0x53, 0xec, 0xc4, 0xc2, 0xa0, 0xa8,
	0x70, 0x30, 0x04, 0x85, 0x20, 0x01, 0xbb, 0x39, 0x03, 0x2d, 0x03, 0x14, 0xcf, 0x69, 0x76, 0x33,
	0x75, 0x2c, 0xd8, 0x2d, 0xc2, 0x40, 0x2d, 0x62, 0x38, 0x03, 0x0c, 0xcd, 0xd0, 0x78, 0xe7, 0x51,
	0xc8, 0xc5, 0x50, 0x88, 0x86, 0xae, 0xae, 0xd8, 0x33, 0x2c, 0x60, 0x46, 0x67, 0xa0, 0x2a, 0xf0,
	0x82, 0x66, 0x46, 0x73, 0xa0, 0x6b, 0x4e, 0x27, 0x06, 0x33, 0x1e, 0x9c, 0x0c, 0xf7, 0xd8, 0x61,
	0xa9, 0x06, 0xfd, 0xdb, 0xb6, 0x66, 0xc6, 0x7d, 0x0d, 0x09, 0x66, 0xd4, 0xc9, 0x61, 0x17, 0x07,
	0x27, 0xc3, 0x8a, 0xe7, 0xbb, 0xfd, 0x29, 0x87, 0x63, 0x7f, 0x18, 0xee, 0x62, 0x3f, 0x82, 0x86,
	0x5d, 0x44, 0x59, 0xe8, 0x06, 0x49, 0x76, 0x4e, 0x8a, 0x77, 0xf0, 0x10, 0x95, 0xec, 0x9c, 0xec,
	0xae, 0x91, 0xf4, 0x13, 0x67, 0x78, 0xec, 0x96, 0xfe, 0x25, 0x49, 0xb2, 0x22, 0x2f, 0x01, 0x95,
	0x27, 0xce, 0x6b, 0x49, 0x6f, 0xf6, 0xb4, 0x99, 0x3c, 0xdb, 0x69, 0x33, 0xa5, 0x9c, 0x36, 0xaf,
	0x12, 0xf2, 0xd4, 0xf1, 0xa6, 0xda, 0xd9, 0x5f, 0x81, 0xc0, 0x01, 0x00, 0x46, 0xa2, 0x37, 0xe7,
	0xe7, 0x7f, 0x0d, 0x06, 0xcd, 0xd9, 0xc0, 0x1d, 0x3a, 0x27, 0x0f, 0x55, 0x42, 0x76, 0x19, 0x30,
	0x8b, 0x80, 0xe6, 0x18, 0xb8, 0xdb, 0xf2, 0xc2, 0x81, 0xdd, 0x05, 0xe9, 0x40, 0xd9, 0x9a, 0x65,
	0xcf, 0xd6, 0x9a, 0xe5, 0x16, 0xb7, 0x66, 0xa5, 0x7f, 0x4b, 0x92, 0x9c, 0x4c, 0xe1, 0x0b, 0x8e,
	0xc4, 0x94, 0xac, 0x8e, 0xc2, 0xb3, 0x30, 0xfe, 0x1d, 0x76, 0x97, 0xab, 0xa7, 0x77, 0x97, 0xb3,
	0x87, 0x65, 0xa6, 0xbc, 0xe8, 0x61, 0xf9, 0x36, 0x3f, 0xe9, 0x0d, 0xb0, 0xf9, 0x9b, 0x7b, 0x4b,
	0xa2, 0x10, 0x81, 0xd5, 0xa0, 0x47, 0x9e, 0xba, 0x1d, 0xef, 0x48, 0x5c, 0x97, 0x29, 0x10, 0xba,
	0x4d, 0x32, 0x0e, 0x53, 0x6e, 0x0e, 0x71, 0x7c, 0x14, 0x73, 0xec, 0x23, 0x4b, 0x1d, 0xfb, 0xf2,
	0x31, 0xc7, 0xbe, 0x4b, 0x24, 0x3b, 0x10, 0x47, 0x12, 0x76, 0x3c, 0x95, 0xe3, 0xd2, 0x6f, 0x53,
	0xac, 0xb5, 0xe1, 0xa9, 0x3a, 0xee, 0x84, 0x98, 0x58, 0xfa, 0x84, 0x98, 0x5c, 0xe6, 0x84, 0x98,
	0x5a, 0xfa, 0x84, 0xb8, 0x3a, 0xff, 0x84, 0xa8, 0x9f, 0xa9, 0xd3, 0xa7, 0x9f, 0xa9, 0x33, 0x31,
	0x67, 0xea, 0x88, 0xbd, 0xd7, 0x62, 0x2f, 0x47, 0x54, 0xc5, 0x65, 0x75, 0xc5, 0x81, 0xe2, 0x27,
	0xc7, 0x7e, 0xff, 0xd0, 0x09, 0x5c, 0x3c, 0x72, 0x32, 0xf3, 0x69, 0x30, 0xe0, 0x17, 0x63, 0x6e,
	0x3e, 0x39, 0x3e, 0xc3, 0x15, 0xa7, 0x16, 0x36, 0x85, 0xe5, 0x4e, 0x34, 0x61, 0xa0, 0xac, 0x47,
	0x02, 0xa5, 0xf4, 0x8f, 0x09, 0xb2, 0x35, 0xd3, 0x88, 0xcd, 0x24, 0xae, 0xc8, 0x41, 0x27, 0x39,
	0x7b, 0xd0, 0xb9, 0x42, 0x72, 0x0e, 0x88, 0xa8, 0x84, 0x89, 0x2a, 0x04, 0x28, 0x7e, 0xbd, 0x1a,
	0xf1, 0x6b, 0x1e, 0x92, 0xe9, 0x85, 0x77, 0x86, 0x18, 0xce, 0x19, 0x25, 0x9c, 0x8b, 0x61, 0xbb,
	0xcf, 0x2e, 0x93, 0xc4, 0xb0, 0xf4, 0xf7, 0xea, 0x9e, 0x64, 0x47, 0xfa, 0xfb, 0xda, 0x93, 0xb2,
	0xae, 0xb4, 0xb6, 0xae, 0xd8, 0x5d, 0x94, 0x48, 0x01, 0xa6, 0x1c, 0xba, 0x53, 0xb7, 0x22, 0x5c,
	0x2f, 0x65, 0x6b, 0xb0, 0xd2, 0xcf, 0x09, 0x55, 0x2e, 0x03, 0xad, 0x5f, 0x39, 0x47, 0xde, 0xc8,
	0x85, 0xe3, 0x0e, 0x37, 0x63, 0xcc, 0x71, 0x87, 0xd3, 0xda, 0x82, 0x44, 0xdf, 0x4b, 0x32, 0xb2,
	0x17, 0xd0, 0xd8, 0xc5, 0x39, 0x9d, 0xa4, 0x5c, 0x75, 0x42, 0x59, 0xf5, 0x36, 0xc9, 0x78, 0x83,
	0xb2, 0xe3, 0x0f, 0xb8, 0xda, 0xf8, 0x08, 0x6f, 0x22, 0x0f, 0xc7, 0x23, 0xb7, 0x71, 0x7c, 0xf4,
	0x88, 0x9f, 0x40, 0x72, 0xb6, 0x0a, 0xa2, 0x37, 0xc8, 0x66, 0x5f, 0x8a, 0x67, 0x5b, 0x66, 0xea,
	0x8b, 0x82, 0xcf, 0xe2, 0x1b, 0x78, 0x91, 0x93, 0x09, 0x2f, 0x72, 0x4a, 0xbf, 0x4e, 0x91, 0xe2,
	0xbc, 0xbe, 0xfb, 0x07, 0xdb, 0x90, 0x58, 0x68, 0x5a, 0xb9, 0x71, 0x8a, 0x38, 0x61, 0x66, 0xd6,
	0x09, 0x21, 0xaf, 0xb2, 0xa1, 0x39, 0x18, 0xf8, 0x6e, 0x10, 0x70, 0x6f, 0x8f, 0x40, 0xa1, 0x3c,
	0x0f, 0xbd, 0xbe, 0x3b, 0x0a, 0xc4, 0x5a, 0xd9, 0x9d, 0xa9, 0x0e, 0x84, 0xd5, 0x0e, 0xdd, 0x03,
	0x67, 0xc8, 0x0c, 0xad, 0x3c, 0xcb, 0x44, 0xc1, 0x4b, 0x3f, 0xce, 0x6c, 0x93, 0xcc, 0xe4, 0xf8,
	0xd1, 0x3d, 0x97, 0xe5, 0xae, 0x82, 0xcd, 0x47, 0xa5, 0x7d, 0x76, 0xa9, 0xa1, 0x9e, 0x72, 0xdf,
	0x21, 0xf9, 0x6f, 0xc3, 0x17, 0x95, 0x18, 0xaf, 0xe5, 0x18, 0x5b, 0x25, 0x53, 0x05, 0x89, 0xa3,
	0x2e, 0x17, 0xd4, 0x5a, 0xe8, 0xfe, 0x2a, 0x59, 0xe9, 0x7f, 0x52, 0xe4, 0x5c, 0xcc, 0x29, 0x78,
	0xa9, 0x97, 0x9d, 0xdb, 0x84, 0x4c, 0x9c, 0x93, 0x85, 0x0f, 0x3b, 0x0a, 0xd1, 0x8f, 0xef, 0x5d,
	0x07, 0x53, 0xcd, 0x68, 0xea, 0x3b, 0xfc, 0x9d, 0x80, 0xf9, 0x91, 0x06, 0xc3, 0x06, 0x45, 0x8c,
	0xc7, 0xdc, 0x85, 0x14, 0x48, 0xe8, 0x15, 0xb9, 0xe5, 0x6e, 0xe8, 0x16, 0x3f, 0xe8, 0x68, 0x17,
	0x6e, 0xf9, 0x45, 0xef, 0x33, 0x85, 0xb3, 0x75, 0xcc, 0xeb, 0x61, 0xc7, 0x5c, 0xfa, 0xd3, 0x55,
	0xb2, 0x19, 0x39, 0xe6, 0x7c, 0x7f, 0x8f, 0x7a, 0xcf, 0x5f, 0x70, 0x9f, 0xf1, 0x05, 0x57, 0x7d,
	0x4b, 0x2f, 0x44, 0xde, 0xd2, 0x63, 0xac, 0xaa, 0xb7, 0x43, 0x1b, 0x4b, 0x9c, 0x22, 0xfe, 0x39,
	0x45, 0x8c, 0xe8, 0x41, 0x35, 0x6a, 0xe3, 0xc4, 0xb2, 0x0f, 0xb7, 0xfc, 0xd5, 0x6e, 0xa1, 0x6f,
	0x44, 0x08, 0x61, 0x97, 0x5e, 0xd0, 0x1c, 0x0d, 0xbd, 0x11, 0x6b, 0x2c, 0xb2, 0xb6, 0x1c, 0x63,
	0x29, 0x0a, 0x76, 0x9d, 0xd1, 0x37, 0xe8, 0x00, 0x59, 0x9b, 0x8f, 0x94, 0x7e, 0x23, 0xad, 0xf5,
	0x1b, 0x42, 0x2b, 0x19, 0x45, 0x2b, 0x8a, 0x2f, 0xac, 0xe9, 0xbe, 0x00, 0x01, 0xee, 0x04, 0x87,
	0xdc, 0xc5, 0xc4, 0x09, 0x44, 0x42, 0x80, 0x13, 0xaf, 0x67, 0x6b, 0x03, 0x6e, 0x6d, 0x31, 0xd4,
	0x2c, 0x43, 0x22, 0x96, 0x91, 0x7e, 0x90, 0x5f, 0xce, 0x0f, 0x0a, 0x67, 0x6b, 0x73, 0xd7, 0x97,
	0xb0, 0xeb, 0x9f, 0xa5, 0xc8, 0xba, 0x76, 0x79, 0x40, 0x3f, 0x22, 0x9b, 0xf8, 0xa2, 0x6f, 0x2d,
	0x71, 0x91, 0x1e, 0xa5, 0x04, 0xe3, 0x82, 0x56, 0x14, 0xde, 0xf9, 0xc6, 0xd5, 0x09, 0x35, 0x45,
	0xa5, 0x22, 0x8a, 0xda, 0x21, 0x79, 0x79, 0xfb, 0x5d, 0x1b, 0xa0, 0x85, 0x73, 0xb6, 0x0a, 0x82,
	0x80, 0xf3, 0x82, 0xe6, 0x13, 0xd7, 0xaf, 0x1c, 0xb3, 0x18, 0xcf, 0xda, 0x21, 0x20, 0x62, 0xbe,
	0xcc, 0x8c, 0xf9, 0xbe, 0xfb, 0xfc, 0x7c, 0xd6, 0x07, 0xf7, 0xd2, 0x7f, 0x26, 0x49, 0x41, 0xbd,
	0x44, 0x8c, 0x29, 0x84, 0x89, 0x65, 0x0b, 0x61, 0xe8, 0xf3, 0xc9, 0x58, 0x9f, 0x57, 0x6f, 0x44,
	0xe0, 0x9c, 0xe3, 0x9c, 0xe8, 0x45, 0x53, 0x02, 0x62, 0x9b, 0x2f, 0x6d, 0x6b, 0x99, 0x25, 0x8e,
	0x52, 0x52, 0xbb, 0x6b, 0xcb, 0x69, 0x37, 0x7b, 0xb6, 0xea, 0x97, 0x8b, 0x56, 0xbf, 0x9b, 0xc4,
	0xf0, 0x85, 0x1e, 0x7d, 0x77, 0x34, 0x0d, 0x64, 0x89, 0x9c, 0x81, 0x97, 0xfe, 0x32, 0x45, 0x36,
	0x23, 0xb7, 0xaf, 0xd0, 0x3b, 0x4e, 0xf5, 0x27, 0x42, 0x56, 0xe0, 0x22, 0x50, 0x28, 0x83, 0x03,
	0xe4, 0x30, 0x55, 0x65, 0x6b, 0xb0, 0x58, 0x95, 0xc3, 0x89, 0xd8, 0x0b, 0xfa, 0x8a, 0xc6, 0xe5,
	0x58, 0x37, 0x47, 0x3a, 0x6a, 0x8e, 0x33, 0xab, 0xfe, 0x2e, 0x29, 0x1c, 0x4f, 0x82, 0x29, 0x1c,
	0xfd, 0xf7, 0x3c, 0xff, 0xe8, 0x94, 0x8f, 0x52, 0x54, 0xb2, 0xa5, 0x3f, 0x4a, 0x11, 0x16, 0xcb,
	0x9d, 0xcd, 0x62, 0xe4, 0x77, 0xb1, 0xd8, 0x6f, 0xd2, 0x24, 0xaf, 0x5c, 0x3b, 0x3f, 0x5b, 0x11,
	0x8a, 0xea, 0x25, 0xb9, 0x9c, 0x5e, 0xc2, 0xc0, 0x4a, 0x69, 0x81, 0x75, 0x9b, 0xe7, 0x17, 0xd6,
	0x6d, 0xad, 0xce, 0xed, 0x73, 0x43, 0xa2, 0x99, 0x13, 0x6c, 0x7a, 0xf6, 0x04, 0x8b, 0x9f, 0x69,
	0x38, 0xc1, 0xa1, 0xd2, 0x9c, 0xc8, 0x31, 0x5e, 0xbf, 0xe8, 0xb7, 0xca, 0x6b, 0xfc, 0xba, 0x4d,
	0xaf, 0xd1, 0x37, 0xd4, 0x77, 0x46, 0xb5, 0x7c, 0x45, 0xc1, 0xd8, 0x47, 0x3d, 0x71, 0xfd, 0xc1,
	0xb1, 0x6b, 0x8b, 0x54, 0x08, 0x7d, 0x54, 0x08, 0x82, 0x34, 0x3a, 0x74, 0x1f, 0x0b, 0x77, 0x67,
	0x97, 0x31, 0x0a, 0xe4, 0xec, 0x5f, 0x19, 0x49, 0x3f, 0x2b, 0x2c, 0xe7, 0x67, 0xeb, 0x0b, 0xfd,
	0x2c, 0x52, 0x29, 0x36, 0x62, 0x2b, 0x45, 0xe8, 0x89, 0x9b, 0xcb, 0x78, 0xa2, 0x11, 0xef, 0x89,
	0xf4, 0x16, 0xa1, 0x8f, 0xc2, 0xb7, 0x0e, 0x41, 0xbd, 0x85, 0xd4, 0x31, 0x98, 0xd2, 0x5f, 0xa7,
	0xc8, 0xba, 0xf6, 0xde, 0xa2, 0x7c, 0xfc, 0xa4, 0x25, 0x1a, 0x1d, 0x18, 0x93, 0x8f, 0x92, 0xb1,
	0xf9, 0xe8, 0xac, 0xb9, 0xa6, 0x48, 0xd6, 0x78, 0x83, 0xc5, 0xbd, 0x4f, 0x0c, 0x81, 0x0b, 0x72,
	0x18, 0x7e, 0x1f, 0xc4, 0x0e, 0xd7, 0x72, 0xac, 0x1b, 0x79, 0xed, 0x2c, 0x46, 0xfe, 0xf1, 0x25,
	0x13, 0x76, 0xfc, 0x0f, 0x94, 0xeb, 0x52, 0x76, 0xb5, 0xab, 0x03, 0x4b, 0xff, 0x97, 0x24, 0x1b,
	0xfa, 0x4b, 0xd7, 0xf3, 0xea, 0xbc, 0x7c, 0x0c, 0xe6, 0x66, 0x63, 0x30, 0x3e, 0x72, 0xc8, 0xdc,
	0xc8, 0xf9, 0x1b, 0x6c, 0x8e, 0x94, 0x87, 0xbc, 0xab, 0x33, 0x1f, 0x7a, 0xe4, 0xb4, 0xaf, 0x3a,
	0xe6, 0xe9, 0x78, 0x87, 0xe4, 0xb9, 0x0f, 0xa0, 0x6f, 0xf3, 0x8b, 0x29, 0x05, 0x04, 0x1e, 0xc1,
	0x53, 0x1e, 0xec, 0xfe, 0x38, 0xe0, 0xcd, 0xa6, 0x0e, 0x14, 0x0d, 0x25, 0x27, 0xe1, 0x57, 0xe7,
	0x21, 0x64, 0x61, 0xc3, 0x79, 0x25, 0x1a, 0x44, 0xb9, 0xef, 0x35, 0x62, 0x4a, 0xff, 0x91, 0x22,
	0xe7, 0xe3, 0x1e, 0x59, 0x7f, 0xb7, 0x6e, 0x7f, 0x9e, 0x96, 0x79, 0xdd, 0x52, 0x54, 0x2c, 0xc7,
	0xf1, 0xfa, 0x4d, 0x7d, 0xd7, 0xfa, 0xe5, 0x78, 0xfe, 0xb4, 0xb1, 0x16, 0xf2, 0xf3, 0xa7, 0x0d,
	0x2d, 0x4a, 0xb2, 0x4b, 0x44, 0xc9, 0xe2, 0xe2, 0xf8, 0xdd, 0x1f, 0xea, 0x23, 0x71, 0x54, 0x58,
	0x50, 0xcb, 0xd6, 0xa3, 0x9f, 0x5d, 0xfd, 0x6b, 0x92, 0x64, 0xc5, 0xbb, 0xf6, 0xb3, 0xb5, 0x49,
	0xd0, 0xa4, 0x20, 0xbb, 0xde, 0xe1, 0xaa, 0x30, 0xd4, 0xcc, 0xf4, 0x50, 0x96, 0x26, 0xfe, 0x32,
	0xa5, 0x80, 0xe8, 0x79, 0x92, 0x3e, 0x0e, 0xbc, 0xd1, 0x01, 0x37, 0x35, 0x1b, 0xb0, 0xb5, 0x1f,
	0x39, 0xde, 0x08, 0x30, 0xbc, 0xd3, 0x95, 0x00, 0x0c, 0x90, 0xe1, 0x40, 0xb3, 0x6f, 0x08, 0xf8,
	0x1e, 0x72, 0xd6, 0x99, 0x9f, 0x55, 0xff, 0x29, 0x49, 0x36, 0xf4, 0x67, 0x73, 0x5d, 0x46, 0x62,
	0x09, 0xa7, 0xba, 0x4a, 0xc8, 0xc4, 0xf1, 0xa7, 0x23, 0xd7, 0x6f, 0x79, 0x7d, 0xfc, 0x96, 0x2a,
	0x67, 0x2b, 0x10, 0x50, 0xff, 0xe1, 0xf8, 0x38, 0x70, 0x0f, 0xc7, 0xc3, 0x01, 0x50, 0xa4, 0x90,
	0x42, 0x83, 0x41, 0x0c, 0x4e, 0x9d, 0x5f, 0x01, 0x76, 0x15, 0xb1, 0x7c, 0x04, 0x66, 0x39, 0x72,
	0x7c, 0xdf, 0x73, 0x0e, 0x5c, 0x40, 0xa6, 0x11, 0xa9, 0x82, 0xd8, 0x25, 0x3a, 0xbb, 0xa2, 0x04,
	0x8a, 0x0c, 0xa3, 0x50, 0x40, 0xb0, 0x3e, 0xc7, 0x9f, 0x7a, 0xfd, 0x21, 0x8a, 0x58, 0x63, 0xeb,
	0x0b, 0x21, 0xdf, 0x43, 0x9e, 0xfa, 0x6d, 0x8a, 0x18, 0xd1, 0x2f, 0x09, 0x7e, 0xb4, 0x5d, 0xd2,
	0xec, 0x4d, 0x56, 0x66, 0xd9, 0x9b, 0xac, 0x8f, 0xc8, 0xa6, 0x38, 0x58, 0x2c, 0x6c, 0xa5, 0xa2,
	0x94, 0x67, 0x4f, 0x5e, 0xbf, 0xef, 0xeb, 0xe7, 0xb8, 0x0e, 0xac, 0x30, 0xe7, 0x38, 0xf7, 0x3e,
	0x21, 0x4a, 0x45, 0x99, 0xf3, 0xc8, 0xe4, 0x8f, 0x87, 0x90, 0x01, 0xf9, 0x23, 0x13, 0x1b, 0x01,
	0x27, 0x3b, 0xb0, 0x63, 0xf0, 0x85, 0xb5, 0x28, 0x11, 0xed, 0xaa, 0xa2, 0x9f, 0x34, 0x94, 0xde,
	0x24, 0x19, 0x7e, 0xd4, 0x7f, 0x95, 0x77, 0x50, 0x09, 0xfc, 0x8e, 0x51, 0x68, 0x31, 0x14, 0xcb,
	0x1f, 0xc6, 0xfe, 0x24, 0x41, 0x72, 0xf2, 0xf3, 0x53, 0x6a, 0xb0, 0xaf, 0x53, 0xd9, 0x3c, 0xf0,
	0x27, 0x4c, 0x0e, 0xc5, 0xc5, 0x15, 0xaf, 0xf7, 0x7c, 0x04, 0x7e, 0xf5, 0xd4, 0xf1, 0xd8, 0x67,
	0x4a, 0xcc, 0xdf, 0xe4, 0x18, 0x2f, 0x2c, 0xb1, 0xa1, 0x11, 0x0f, 0xa1, 0x6c, 0xc4, 0xe0, 0xfd,
	0xf1, 0x91, 0x70, 0x37, 0x3e, 0x82, 0x35, 0xac, 0x6b, 0x5f, 0xa3, 0x82, 0x67, 0xfa, 0xca, 0xa3,
	0x50, 0xca, 0x16, 0x43, 0x7c, 0xb6, 0x7c, 0xe2, 0x78, 0x43, 0x7c, 0x54, 0x17, 0xcf, 0x96, 0x02,
	0x80, 0xbf, 0x3b, 0x40, 0x77, 0x84, 0xcc, 0xcb, 0x1f, 0x68, 0x25, 0x00, 0xdf, 0xdb, 0x9d, 0x93,
	0x23, 0x30, 0x8f, 0x88, 0x05, 0x31, 0x2e, 0xb9, 0x64, 0x5d, 0xfb, 0xa8, 0x15, 0x96, 0xa0, 0xbe,
	0xa6, 0xa6, 0xf4, 0x97, 0xd3, 0x67, 0x5c, 0x42, 0xc9, 0x23, 0x9b, 0x91, 0xaf, 0x5f, 0x81, 0x41,
	0x16, 0x3e, 0x3e, 0x55, 0x08, 0x58, 0x30, 0x99, 0xba, 0xa3, 0x54, 0x64, 0x47, 0xbf, 0x4e, 0x90,
	0x82, 0xfa, 0xa9, 0xec, 0x0f, 0xa0, 0xd4, 0xbf, 0x5a, 0xe5, 0x1f, 0x32, 0xf3, 0xf8, 0x01, 0x6f,
	0xd6, 0xe2, 0x2b, 0x11, 0x8d, 0xaf, 0x1f, 0xd7, 0x0f, 0xa6, 0x9e, 0xf1, 0xd7, 0x2f, 0x32, 0x29,
	0x65, 0x4e, 0x4f, 0x4a, 0x33, 0x3f, 0x10, 0x5a, 0x5b, 0xea, 0x07, 0x42, 0xd9, 0x98, 0x1f, 0x08,
	0x9d, 0xe1, 0x88, 0x19, 0x7d, 0x41, 0x23, 0xcb, 0xbd, 0xa0, 0xbd, 0x46, 0xd2, 0xd8, 0x24, 0xcf,
	0xbf, 0xfd, 0x60, 0xf8, 0x98, 0x6a, 0x55, 0x88, 0xad, 0x56, 0xe7, 0x49, 0x7a, 0xe2, 0x9c, 0xb8,
	0x03, 0xfe, 0x7a, 0xc3, 0x06, 0xa5, 0xff, 0xca, 0x33, 0x97, 0xe1, 0xc1, 0x28, 0x5c, 0xe6, 0xf9,
	0x8f, 0x9d, 0x9e, 0xff, 0xd8, 0xe9, 0xf9, 0x8f, 0x9d, 0x9e, 0xff, 0xd8, 0xe9, 0xf9, 0x8f, 0x9d,
	0x7e, 0xb8, 0x1f, 0x3b, 0x85, 0x25, 0xe0, 0xd5, 0x05, 0x25, 0x00, 0x0e, 0x1d, 0xd8, 0x68, 0xba,
	0x83, 0xe2, 0x75, 0x7e, 0xe8, 0xe0, 0x63, 0xa5, 0xa1, 0x7c, 0x4d, 0x6d, 0x28, 0x4b, 0xff, 0x90,
	0x66, 0x3f, 0x10, 0x91, 0xed, 0x11, 0xa6, 0xfe, 0xe7, 0x4f, 0x20, 0xcf, 0x9f, 0x40, 0xbe, 0xbb,
	0x27, 0x10, 0xe9, 0xc0, 0xc6, 0x02, 0x07, 0x3e, 0xe3, 0xfb, 0x47, 0xd8, 0xcb, 0x50, 0xb5, 0x97,
	0xf9, 0xdf, 0x24, 0x59, 0x7f, 0xa4, 0xb9, 0xf3, 0xbc, 0xa3, 0x9c, 0xee, 0x62, 0xc9, 0x65, 0x5c,
	0x4c, 0x75, 0x9f, 0x54, 0xc4, 0x7d, 0xc4, 0x45, 0xc0, 0xaa, 0x72, 0x11, 0x10, 0x71, 0x80, 0xf4,
	0x29, 0xd7, 0x7c, 0x99, 0xe5, 0xec, 0xb5, 0x76, 0x56, 0x7b, 0x65, 0x17, 0xd8, 0x2b, 0x37, 0xd7,
	0x5e, 0x64, 0x81, 0xbd, 0xa4, 0xfe, 0xf3, 0xaa, 0xfe, 0x3f, 0x81, 0x63, 0x65, 0x70, 0x3c, 0x9c,
	0x8a, 0xef, 0x0d, 0x5f, 0xd7, 0x4f, 0x40, 0xf1, 0xdf, 0x1a, 0x0a, 0x92, 0x90, 0x5d, 0x7c, 0x65,
	0x78, 0xa6, 0x0f, 0x6c, 0x4b, 0xfb, 0xe4, 0x1c, 0x63, 0xd7, 0xbf, 0x30, 0x7b, 0x8b, 0xa4, 0xf1,
	0x27, 0x76, 0x5c, 0xc4, 0x29, 0xbf, 0xc6, 0xb3, 0x19, 0x61, 0x69, 0x8f, 0x6c, 0x30, 0x41, 0xf2,
	0x6b, 0xec, 0x77, 0x48, 0xf6, 0xa9, 0xf8, 0x09, 0x5d, 0xe2, 0xf4, 0x9f, 0xd0, 0xd9, 0x92, 0x32,
	0x94, 0x23, 0xbf, 0x80, 0x7e, 0x87, 0x64, 0x7d, 0xf1, 0xa3, 0xbe, 0xc4, 0xe9, 0x3f, 0xea, 0xb3,
	0x25, 0x65, 0x69, 0x40, 0xb6, 0xb9, 0x5e, 0x82, 0xc8, 0x97, 0xc1, 0x9f, 0x13, 0x63, 0x12, 0x81,
	0x71, 0xb9, 0x0b, 0x7e, 0x9d, 0x66, 0xcf, 0xf0, 0x95, 0x5c, 0x31, 0x4b, 0x79, 0x12, 0xf9, 0x5c,
	0xf7, 0x1e, 0x31, 0xfa, 0x11, 0x18, 0x9f, 0x65, 0xd1, 0x2f, 0xec, 0xec, 0x19, 0xc6, 0xd2, 0x6d,
	0x42, 0xf8, 0x34, 0x4e, 0x70, 0x48, 0x5f, 0x26, 0xab, 0x10, 0x44, 0x5c, 0x5c, 0xf4, 0x67, 0x85,
	0x36, 0x22, 0x4b, 0x77, 0x49, 0x9e, 0xb3, 0xe0, 0xef, 0x4e, 0xae, 0x93, 0x74, 0x1f, 0x7f, 0x5b,
	0x98, 0x88, 0xff, 0x6d, 0xa1, 0xcd, 0xd0, 0xa5, 0x0f, 0x48, 0x81, 0xb1, 0xf1, 0x0b, 0x9a, 0x9f,
	0x90, 0x0c, 0x2b, 0x8a, 0x91, 0xaa, 0x16, 0xfe, 0xdc, 0xc2, 0xe6, 0x04, 0x37, 0xff, 0xf6, 0x1c,
	0xfb, 0xa1, 0x0b, 0x86, 0x21, 0x25, 0x24, 0xd3, 0x6d, 0xdc, 0x6b, 0x34, 0x1f, 0x1a, 0x2b, 0x74,
	0x9b, 0xd0, 0x87, 0x66, 0xad, 0xd3, 0xeb, 0xb6, 0xda, 0x1d, 0xdb, 0x32, 0xef, 0xf7, 0xda, 0xb5,
	0xfd, 0x86, 0x91, 0xa0, 0x45, 0x72, 0x5e, 0x82, 0x6c, 0x6b, 0xaf, 0xdb, 0xb6, 0x18, 0x26, 0x49,
	0x0d, 0x52, 0xd8, 0xad, 0xd5, 0xeb, 0xbd, 0x6a, 0xb3, 0x5e, 0xa9, 0x35, 0xf6, 0x8d, 0x14, 0xbd,
	0x40, 0xb6, 0x50, 0x46, 0xb9, 0x69, 0x5b, 0xbd, 0x72, 0xd5, 0x2a, 0xdf, 0xb3, 0x2a, 0xc6, 0x2a,
	0xbd, 0x48, 0xce, 0x21, 0x84, 0xb3, 0x0b, 0x44, 0x5a, 0xd2, 0xb7, 0xba, 0xbb, 0xf5, 0x5a, 0xbb,
	0xca, 0x04, 0x67, 0x80, 0x5e, 0x40, 0xd4, 0x19, 0xd7, 0x60, 0x8d, 0xea, 0x8c, 0xbd, 0x5a, 0xbb,
	0xdd, 0xb5, 0x8c, 0x2c, 0x30, 0xc8, 0x35, 0xee, 0x5a, 0xbd, 0x96, 0xdd, 0xac, 0x74, 0xcb, 0x1d,
	0x23, 0x47, 0xcf, 0x13, 0x03, 0x69, 0x54, 0x28, 0xa1, 0x9b, 0x24, 0x8f, 0x62, 0xca, 0x66, 0xa3,
	0x6c, 0xd5, 0x8d, 0x3c, 0xdd, 0x22, 0xeb, 0x1c, 0xcb, 0x60, 0x46, 0x81, 0x52, 0xb2, 0x81, 0x4b,
	0xdb, 0xef, 0x9a, 0xb6, 0xd9, 0xe8, 0x58, 0x96, 0xb1, 0x0e, 0xd2, 0x10, 0xd6, 0xb1, 0xbb, 0xed,
	0x8e, 0x65, 0xb5, 0xab, 0xb5, 0x96, 0xb1, 0x01, 0x50, 0xbe, 0xca, 0x90, 0x76, 0x13, 0x96, 0xca,
	0xa1, 0x2a, 0xb5, 0x01, 0x4a, 0x43, 0x19, 0xd6, 0x97, 0xe6, 0xfd, 0x5a, 0xc3, 0x32, 0xb6, 0x60,
	0x26, 0x4e, 0x29, 0x60, 0x94, 0xe6, 0xc9, 0x5a, 0xb3, 0x81, 0xdb, 0x34, 0xce, 0xd1, 0x0d, 0x42,
	0x9a, 0x8d, 0x5e, 0xbd, 0xd6, 0xee, 0x80, 0x96, 0xcf, 0x83, 0x45, 0xc2, 0x71, 0xaf, 0x62, 0x09,
	0xcc, 0x05, 0xc0, 0xa0, 0xf0, 0xbd, 0xa6, 0xdd, 0xab, 0xd7, 0xbe, 0xe8, 0xd6, 0x2a, 0x66, 0xa7,
	0xd6, 0x6c, 0x18, 0xdb, 0xf4, 0x1c, 0xd9, 0x6c, 0x77, 0xcb, 0x65, 0xab, 0xdd, 0xee, 0xd9, 0x56,
	0xdd, 0x32, 0xdb, 0x96, 0x71, 0x11, 0xd6, 0xb2, 0x67, 0xd6, 0xea, 0x12, 0x52, 0x54, 0xc9, 0x5a,
	0xe6, 0x57, 0xf7, 0xad, 0x46, 0xc7, 0x78, 0x01, 0x95, 0xd8, 0xe8, 0x99, 0xdd, 0x4a, 0xad, 0xd3,
	0xe3, 0x58, 0xe3, 0x12, 0xbd, 0x4c, 0x2e, 0x36, 0xbb, 0x1d, 0x06, 0xbe, 0xd3, 0xdb, 0x35, 0x1b,
	0xf7, 0x24, 0xf2, 0x32, 0x2e, 0x31, 0x82, 0x84, 0x99, 0x8c, 0x2b, 0xa0, 0x17, 0x89, 0xb9, 0x2d,
	0x39, 0x5e, 0x84, 0x99, 0x15, 0x38, 0x12, 0x5f, 0x15, 0x40, 0xdc, 0x13, 0xc3, 0x18, 0xd7, 0xc0,
	0x58, 0xe5, 0xba, 0x65, 0xda, 0x92, 0xb9, 0x04, 0x06, 0x65, 0xa0, 0x3d, 0xb3, 0xde, 0xb6, 0x8c,
	0x97, 0x61, 0x67, 0x2d, 0xb3, 0xdd, 0x96, 0x1a, 0xbd, 0x2e, 0x9d, 0xb5, 0xf9, 0xc0, 0xb2, 0x2b,
	0x5d, 0xcb, 0x78, 0x4d, 0x7a, 0x81, 0xf5, 0x65, 0xab, 0x66, 0x5b, 0xc6, 0x0d, 0x74, 0xbb, 0xba,
	0x55, 0xd9, 0xb7, 0x7a, 0x08, 0x17, 0x6a, 0xfd, 0x09, 0xbd, 0x4a, 0x2e, 0xc5, 0x20, 0x7a, 0x7b,
	0xb5, 0x46, 0xad, 0x5d, 0x35, 0x6e, 0x46, 0x19, 0x45, 0x3c, 0xfc, 0x14, 0xd4, 0xa0, 0x22, 0xcc,
	0x56, 0xab, 0xfe, 0x15, 0x60, 0x5e, 0x07, 0x9d, 0xaa, 0x98, 0x5a, 0xb3, 0xdb, 0x36, 0xde, 0xa0,
	0x3b, 0xe4, 0x4a, 0xb9, 0xd9, 0xe8, 0xd8, 0x66, 0xb9, 0xc3, 0xe0, 0xb8, 0xf3, 0x76, 0x77, 0xb7,
	0x5d, 0xb6, 0x6b, 0xbb, 0x96, 0x71, 0x8b, 0xbe, 0x48, 0x5e, 0xd0, 0x29, 0x60, 0x31, 0x62, 0x25,
	0x6f, 0xc2, 0x4a, 0x75, 0x74, 0xad, 0xa1, 0xb0, 0xbf, 0x45, 0x4b, 0xe4, 0xaa, 0x8e, 0x67, 0x9c,
	0x0a, 0xcd, 0x6d, 0xfa, 0x02, 0xb9, 0xa0, 0xd3, 0x88, 0xfd, 0xdc, 0x01, 0x7b, 0x20, 0xa4, 0x65,
	0x7e, 0xd5, 0xdb, 0xb3, 0x9b, 0x5f, 0x5b, 0x0d, 0xe3, 0x6d, 0x1d, 0xc8, 0x16, 0xf2, 0x8e, 0x06,
	0xe4, 0x61, 0x76, 0x97, 0x5e, 0x23, 0x97, 0xe3, 0xd4, 0xc1, 0x83, 0xdc, 0x78, 0x17, 0xb8, 0xaa,
	0x66, 0xa5, 0x57, 0x36, 0xdb, 0x55, 0x21, 0xea, 0x3d, 0x69, 0xb9, 0x5a, 0xe3, 0x81, 0x59, 0xaf,
	0x55, 0x8c, 0xf7, 0x41, 0x79, 0x62, 0x73, 0x1d, 0xdb, 0x6c, 0xb4, 0xf7, 0x2c, 0xdb, 0xf8, 0x00,
	0x94, 0x8d, 0x50, 0x01, 0x12, 0x12, 0x3e, 0x14, 0xb1, 0x0c, 0x53, 0x55, 0x9b, 0x8d, 0x66, 0xd7,
	0x36, 0x3e, 0x82, 0xd4, 0xa3, 0x2f, 0xa2, 0xd6, 0xec, 0x1a, 0x1f, 0xd3, 0x02, 0xc9, 0x22, 0xa4,
	0xd7, 0xbc, 0x67, 0x7c, 0x02, 0x53, 0xb3, 0x91, 0x6d, 0x7d, 0x6e, 0x95, 0x3b, 0xc6, 0x1f, 0x40,
	0x2c, 0xd6, 0x9a, 0x5d, 0xb1, 0xf9, 0x4f, 0xe9, 0x25, 0xb2, 0x0d, 0x63, 0x1e, 0x2c, 0x3d, 0xdb,
	0x7a, 0xd0, 0x2c, 0xb3, 0x98, 0xfb, 0x0c, 0x1c, 0x0c, 0x70, 0xcc, 0xbf, 0x2a, 0x86, 0x29, 0x00,
	0x22, 0xb2, 0x76, 0x01, 0x00, 0x0a, 0x12, 0x8e, 0x5c, 0x16, 0x14, 0xc2, 0x49, 0x2b, 0xb0, 0x1e,
	0x96, 0x21, 0xcd, 0xaf, 0x0c, 0x0b, 0x14, 0xa8, 0xce, 0x56, 0x35, 0x1f, 0x58, 0xea, 0x94, 0x7b,
	0xa0, 0x40, 0x13, 0x13, 0x5b, 0xa8, 0xc0, 0x7d, 0xd8, 0x2a, 0x70, 0x89, 0x9d, 0x3c, 0x68, 0x42,
	0xf2, 0xad, 0x62, 0x32, 0xad, 0x43, 0x64, 0x36, 0x9a, 0x1d, 0x4b, 0x6a, 0xb7, 0x05, 0x5b, 0xd2,
	0xe0, 0xa1, 0xdb, 0x7e, 0xc1, 0xfc, 0x47, 0xc9, 0xe4, 0xcd, 0xc6, 0x5e, 0xcd, 0xbe, 0xdf, 0x0b,
	0xe9, 0x0d, 0x1b, 0x9c, 0x18, 0x97, 0x8c, 0x51, 0x1f, 0x43, 0xd1, 0x06, 0x29, 0x48, 0x51, 0x6b,
	0x3c, 0xb0, 0xda, 0x9d, 0x38, 0x9a, 0x0e, 0xd0, 0xa0, 0x80, 0xf9, 0x33, 0x75, 0xe9, 0x2b, 0x64,
	0x87, 0x8b, 0x98, 0x4f, 0xf5, 0x80, 0xbe, 0x44, 0x5e, 0x44, 0x49, 0xe6, 0xbe, 0x6d, 0xc5, 0x92,
	0x3c, 0xa4, 0x2f, 0x93, 0x6b, 0x5c, 0xd0, 0x5c, 0xa2, 0x2f, 0xc1, 0xbf, 0x2a, 0xcd, 0x87, 0x2c,
	0x2b, 0xab, 0x98, 0xaf, 0x00, 0x83, 0x5a, 0x89, 0x62, 0xbe, 0x46, 0x4f, 0xc5, 0x31, 0xb8, 0x35,
	0xf7, 0xbd, 0x3f, 0xa4, 0xeb, 0x24, 0xb7, 0xd7, 0x6d, 0x54, 0x50, 0x43, 0xc6, 0x1f, 0x81, 0xd1,
	0x71, 0xc8, 0x96, 0x60, 0xfc, 0x0c, 0xfc, 0x55, 0x98, 0xb8, 0xd9, 0xa8, 0x43, 0xfe, 0xfa, 0x63,
	0xb0, 0xac, 0x84, 0xed, 0xed, 0x21, 0xb0, 0x17, 0xfa, 0x27, 0x17, 0xfd, 0x73, 0xa8, 0xe8, 0x3c,
	0x9f, 0x39, 0x58, 0x44, 0xb8, 0x23, 0x3d, 0x52, 0xf9, 0x85, 0xa9, 0xfb, 0x90, 0x4d, 0x94, 0x7a,
	0xcd, 0x37, 0x2d, 0xdc, 0x73, 0x00, 0xee, 0x16, 0x67, 0x6d, 0x41, 0xe0, 0x6a, 0x2a, 0x81, 0x18,
	0x12, 0x98, 0xc7, 0x20, 0xd9, 0xac, 0x3c, 0x80, 0xc0, 0xe7, 0x0a, 0x51, 0xfd, 0xe8, 0x00, 0x6c,
	0xa2, 0xa3, 0x79, 0x1e, 0x92, 0x24, 0x87, 0x90, 0x54, 0xb9, 0x4d, 0x50, 0xad, 0x9c, 0xdc, 0xf0,
	0xe8, 0x15, 0x52, 0xc4, 0x49, 0x85, 0x00, 0xdc, 0x01, 0x57, 0xc0, 0x2f, 0x20, 0x03, 0x0a, 0x44,
	0x18, 0x26, 0x52, 0xf7, 0xdf, 0x60, 0x84, 0x29, 0x4b, 0x19, 0x62, 0x11, 0x54, 0x26, 0x37, 0x8e,
	0xc0, 0x3c, 0xdd, 0x86, 0x08, 0x9f, 0x11, 0x84, 0x3c, 0x48, 0xe0, 0xe3, 0x31, 0xf8, 0x77, 0xa5,
	0x66, 0x5b, 0x65, 0x08, 0x39, 0xb3, 0x3e, 0x9b, 0x85, 0x27, 0xf4, 0x55, 0xf2, 0xd2, 0x0c, 0xc5,
	0x4c, 0xa2, 0xfd, 0x25, 0x54, 0xd0, 0x19, 0x32, 0xc8, 0x95, 0x75, 0xcb, 0xf0, 0x63, 0x91, 0x3c,
	0x4f, 0x06, 0x37, 0xff, 0x6e, 0x83, 0xac, 0x6b, 0xa7, 0x24, 0xb6, 0x66, 0xe8, 0xe4, 0x7a, 0xcd,
	0x96, 0xb1, 0x82, 0x69, 0xac, 0x52, 0x41, 0x2e, 0x23, 0x01, 0xb6, 0x67, 0x39, 0xb8, 0x27, 0x81,
	0x49, 0x50, 0x44, 0xb7, 0x55, 0x31, 0x3b, 0x2c, 0x19, 0x1b, 0x29, 0xc8, 0x07, 0xc2, 0xc2, 0x2c,
	0x0a, 0xb0, 0xe9, 0x5a, 0x05, 0x42, 0xb5, 0x0b, 0x4b, 0x43, 0x81, 0x90, 0x39, 0x96, 0xbb, 0x0f,
	0xb2, 0x19, 0x19, 0xa8, 0xcd, 0x12, 0x65, 0x55, 0x6a, 0x1d, 0x63, 0x0d, 0xd2, 0x09, 0x13, 0x27,
	0x11, 0x82, 0x3c, 0x0b, 0x9b, 0x94, 0x4d, 0x52, 0x04, 0x99, 0x93, 0x0d, 0xa9, 0x44, 0xe1, 0xf4,
	0x04, 0x1c, 0x23, 0x22, 0x10, 0x11, 0x79, 0xf0, 0xc6, 0xa8, 0x34, 0xc4, 0x14, 0x60, 0x1e, 0xae,
	0x80, 0x99, 0x79, 0xd6, 0x41, 0x9e, 0x84, 0x76, 0x9a, 0xb2, 0x4d, 0xdc, 0x80, 0x05, 0x74, 0x9a,
	0x2d, 0x6e, 0x12, 0xc9, 0xb0, 0x09, 0xe1, 0xc9, 0x35, 0x27, 0x68, 0x0d, 0xa0, 0xe5, 0x8b, 0x6a,
	0x2a, 0x6d, 0xe0, 0x16, 0x08, 0x17, 0x6b, 0x52, 0x11, 0x14, 0x84, 0x48, 0x06, 0xec, 0x10, 0x8d,
	0x73, 0x60, 0xa7, 0x90, 0x98, 0x01, 0xcf, 0x83, 0x4a, 0xb1, 0x85, 0xb5, 0x79, 0xea, 0x36, 0x2e,
	0x60, 0xd1, 0x61, 0x20, 0xd1, 0x8a, 0x88, 0xc5, 0x6d, 0x63, 0xb2, 0x67, 0xb8, 0x87, 0xb5, 0x4e,
	0xb5, 0x62, 0x9b, 0x0f, 0xcd, 0xba, 0x71, 0x11, 0xdb, 0xae, 0x56, 0x2f, 0x12, 0x19, 0x46, 0x11,
	0xc8, 0x9b, 0x2d, 0x5e, 0xa2, 0x94, 0x96, 0x8f, 0x91, 0xf3, 0xec, 0x21, 0xe1, 0x97, 0x18, 0xb9,
	0x65, 0x63, 0xb9, 0x51, 0xda, 0x3d, 0x4a, 0x36, 0x42, 0x30, 0x6f, 0xf4, 0x2e, 0x90, 0x2d, 0xd1,
	0x53, 0x87, 0x2d, 0xea, 0x8b, 0x40, 0x8a, 0xbe, 0x1c, 0xc2, 0xae, 0x62, 0x7d, 0xe6, 0x8b, 0xe5,
	0x41, 0x78, 0x0d, 0x1c, 0x5a, 0x16, 0x2d, 0x63, 0x07, 0x54, 0x13, 0xd6, 0x30, 0x73, 0xdf, 0xac,
	0x35, 0x8c, 0x97, 0xb0, 0x31, 0x8d, 0x14, 0x36, 0xa3, 0x04, 0x69, 0x8f, 0x17, 0x49, 0xe3, 0x65,
	0xc1, 0x87, 0x6d, 0x08, 0xd7, 0xd1, 0x2b, 0x30, 0x9f, 0x00, 0x72, 0xae, 0x57, 0xc1, 0x79, 0x50,
	0x16, 0xda, 0x44, 0xc1, 0x5c, 0x17, 0x25, 0x9e, 0xf7, 0x00, 0x2a, 0xee, 0x35, 0x21, 0x89, 0xad,
	0x00, 0xaa, 0xae, 0x71, 0x03, 0xc2, 0x23, 0x94, 0x04, 0x98, 0x1a, 0x2f, 0xcf, 0x3f, 0x11, 0xa2,
	0xb8, 0x91, 0x55, 0xdc, 0x4d, 0x48, 0x33, 0x6d, 0xab, 0xd3, 0x2b, 0xdb, 0x18, 0x37, 0x3f, 0x05,
	0xbb, 0x73, 0x2f, 0xe3, 0xa0, 0xd7, 0x41, 0x27, 0x32, 0xdb, 0x18, 0x6f, 0xc8, 0x36, 0x88, 0xbb,
	0x36, 0x42, 0x6f, 0x61, 0xde, 0x84, 0xe9, 0x23, 0xa6, 0x7e, 0x13, 0x6c, 0x1a, 0xb6, 0x23, 0x12,
	0xfe, 0x96, 0x60, 0x88, 0x1a, 0xfb, 0xb6, 0xec, 0xe1, 0xaa, 0x66, 0xa3, 0x52, 0x47, 0x84, 0x71,
	0x27, 0x9c, 0x34, 0x2c, 0x06, 0x4a, 0x0f, 0xc8, 0x97, 0x02, 0xc0, 0x77, 0x40, 0x11, 0xac, 0xc5,
	0x62, 0x35, 0x35, 0x44, 0xdd, 0xc5, 0x1e, 0x23, 0xcc, 0x68, 0x2a, 0xee, 0x5d, 0xbd, 0x33, 0x13,
	0x89, 0xfb, 0x3d, 0xd9, 0xde, 0x45, 0x37, 0xf6, 0x3e, 0x6c, 0x40, 0x69, 0xe4, 0x25, 0x22, 0xec,
	0x08, 0xa3, 0x5b, 0xfb, 0x10, 0x94, 0x8b, 0xe1, 0x80, 0x92, 0x6c, 0x6b, 0xdf, 0xf8, 0x18, 0x8f,
	0x2c, 0x12, 0x84, 0x65, 0x0f, 0xd7, 0x6d, 0x7c, 0x02, 0xfb, 0x88, 0x60, 0x64, 0x3b, 0x88, 0x8e,
	0x2f, 0x50, 0x68, 0xa5, 0x4f, 0xf1, 0xd0, 0x12, 0x92, 0x9b, 0xd0, 0xfa, 0x7e, 0x06, 0x6b, 0x0c,
	0x81, 0x6c, 0x67, 0xd0, 0x70, 0x9a, 0x50, 0x28, 0x63, 0x85, 0x23, 0x7a, 0x57, 0xc6, 0xad, 0x9c,
	0x00, 0xe1, 0xe5, 0xc8, 0x6a, 0x99, 0xfa, 0x00, 0x53, 0x81, 0x02, 0x18, 0x62, 0xb4, 0xae, 0x06,
	0xf0, 0xd8, 0x43, 0xce, 0xe0, 0x95, 0x29, 0xf7, 0xf4, 0xed, 0x8a, 0x16, 0xcd, 0xc4, 0x4e, 0x12,
	0xce, 0x7c, 0xfa, 0x62, 0xb1, 0xd3, 0x04, 0xbe, 0xaa, 0xbe, 0x54, 0xac, 0xd0, 0x60, 0xcf, 0x1a,
	0xd4, 0xeb, 0x19, 0x79, 0x10, 0x44, 0xc0, 0xf5, 0x39, 0xf8, 0x53, 0xb4, 0xce, 0x19, 0xf7, 0x60,
	0x13, 0x33, 0xd5, 0x2f, 0xcc, 0x18, 0xf5, 0xd8, 0x1a, 0xac, 0x86, 0xc1, 0x7d, 0xe8, 0x1f, 0x67,
	0x28, 0xb4, 0x66, 0xd1, 0x68, 0x3c, 0xca, 0xe0, 0x7f, 0xde, 0x7d, 0xfb, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x93, 0x56, 0xd9, 0x66, 0x86, 0x57, 0x00, 0x00,
}
